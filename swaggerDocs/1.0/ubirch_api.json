{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "ubirch REST API",
        "description": "This is the definition of the ubirch REST API containing the following parts:|\n- devices CRUD endpoints\n- key registry endpoints, where public keys of devices and apps can be stored and requested and handshakes between two parties can be performed\n- chain service endpoints, to get information about certificates, blockchain entries and bitcoin/etherium anchors to notarize that a message was sent"
    },
    "basePath": "/api",
    "produces": [
        "application/json"
    ],
    "paths": {
        "/avatarService/v1/device": {
            "post": {
                "tags": [
                    "avatar service",
                    "device CRUD",
                    "revisionNeeded"
                ],
                "summary": "CREATE new device",
                "description": "creates a new device; a unique device id is required; several other properties of the device can be added optionally; some properties are created with default values on server if not specified; everything except the device id can be changed later with an update request",
                "parameters": [
                    {
                        "in": "body",
                        "name": "device",
                        "description": "the device object with the new device data that should be created; MUST contain the new unique device id, that MUST nOT exist already",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DeviceObject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns data of the new created device",
                        "schema": {
                            "$ref": "#/definitions/DeviceObject"
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "avatar service",
                    "device CRUD",
                    "revisionNeeded"
                ],
                "summary": "LIST all devices",
                "description": "returns an array of all devices the authenticated user has connected",
                "responses": {
                    "200": {
                        "description": "Successful response; returns an array of devices",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DeviceObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/avatarService/v1/device/{deviceId}": {
            "put": {
                "tags": [
                    "avatar service",
                    "device CRUD",
                    "revisionNeeded"
                ],
                "summary": "UPDATE device",
                "description": "updates the device referenced by the given id with the sent data, if the authenticated user is autorized to do this",
                "parameters": [
                    {
                        "in": "path",
                        "name": "deviceId",
                        "description": "unique id of the device that shall be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "device",
                        "description": "the device object with the new data to update the existing device data with",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DeviceObject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns the updated data of the device",
                        "schema": {
                            "$ref": "#/definitions/DeviceObject"
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "avatar service",
                    "device CRUD",
                    "revisionNeeded"
                ],
                "summary": "READ device",
                "description": "returns data of device with the given id, if the authenticated user is autorized to get it",
                "parameters": [
                    {
                        "in": "path",
                        "name": "deviceId",
                        "description": "id of the requested device",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns data of requested device",
                        "schema": {
                            "$ref": "#/definitions/DeviceObject"
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "avatar service",
                    "device CRUD",
                    "revisionNeeded"
                ],
                "summary": "DELETE device",
                "description": "deletes device with the given id, if the authenticated user is autorized to do",
                "parameters": [
                    {
                        "in": "path",
                        "name": "deviceId",
                        "description": "id of the device, that shall be delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns data of the device before deleting it",
                        "schema": {
                            "$ref": "#/definitions/DeviceObject"
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/avatarService/v1/device/stub": {
            "get": {
                "tags": [
                    "avatar service",
                    "device CRUD",
                    "revisionNeeded"
                ],
                "summary": "LIST all devices as stubs",
                "description": "returns an array of stubs of all devices the authenticated user has connected; the stubs contain a mix of device properties and state items as needed in devices overviews",
                "responses": {
                    "200": {
                        "description": "Successful response; returns an array of device stubs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DeviceStubObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/avatarService/v1/device/stub/{deviceId}": {
            "get": {
                "tags": [
                    "avatar service",
                    "device CRUD",
                    "revisionNeeded"
                ],
                "summary": "READ device as stub",
                "description": "returns a stub of the device with the given id, if the authenticated user is autorized to get it; ; the stub contains a mix of device properties and state items",
                "parameters": [
                    {
                        "in": "path",
                        "name": "deviceId",
                        "description": "id of the requested device",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns stub of the requested device",
                        "schema": {
                            "$ref": "#/definitions/DeviceStubObject"
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/avatarService/v1/device/{deviceId}/state": {
            "post": {
                "tags": [
                    "avatar service",
                    "device history",
                    "2BImplemented",
                    "revisionNeeded"
                ],
                "summary": "POST current state of device",
                "description": "sends state of device; will be stored in the states data base",
                "parameters": [
                    {
                        "in": "path",
                        "name": "deviceId",
                        "description": "id of the device from this state",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns the new stored device state",
                        "schema": {
                            "$ref": "#/definitions/DeviceState"
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "avatar service",
                    "device history",
                    "revisionNeeded"
                ],
                "summary": "current state of device",
                "description": "returns the newest state that has been send for this device",
                "parameters": [
                    {
                        "in": "path",
                        "name": "deviceId",
                        "description": "id of the device from which we request the current state",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns the current state of the device",
                        "schema": {
                            "$ref": "#/definitions/DeviceState"
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/avatarService/v1/device/{deviceId}/history": {
            "get": {
                "tags": [
                    "avatar service",
                    "device history",
                    "2BImplemented",
                    "revisionNeeded"
                ],
                "summary": "list of latest sent device states",
                "description": "returns an array of the last 10 values the device sent in the format elastic search deliveres",
                "parameters": [
                    {
                        "in": "path",
                        "name": "deviceId",
                        "description": "id of the requested device",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns an array of device states",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DeviceState"
                            }
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/avatarService/v1/device/{deviceId}/history/{from}/{size}": {
            "get": {
                "tags": [
                    "avatar service",
                    "device history",
                    "2BImplemented",
                    "revisionNeeded"
                ],
                "summary": "list of device states for pagination",
                "description": "returns an array of values the device sent in the format elastic search deliveres; for pagination, deliveres the defined part of the whole list",
                "parameters": [
                    {
                        "in": "path",
                        "name": "deviceId",
                        "description": "id of the requested device",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "from",
                        "description": "the number of the jongest device state message we request; messages ordered by descending timestamps",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "size",
                        "description": "number of device state message we request; starting from the message defined by 'from' to the past",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns an array of device states",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DeviceState"
                            }
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/avatarService/v1/device/deviceType": {
            "get": {
                "tags": [
                    "avatar service",
                    "device CRUD",
                    "revisionNeeded"
                ],
                "summary": "LIST all device types",
                "description": "returns an array of all configured device types",
                "responses": {
                    "200": {
                        "description": "Successful response; returns an array of device types",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DeviceType"
                            }
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/chainService/explorer/eventHash/{eventHash}": {
            "get": {
                "tags": [
                    "chainservice",
                    "revisionNeeded"
                ],
                "summary": "short block Info for an event hash",
                "description": "returns blockInfo of the block in which this event hash has been inserted",
                "parameters": [
                    {
                        "in": "path",
                        "name": "eventHash",
                        "description": "event hash of the message for which the notorization state should be checked",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns the short info of the block in which this message is part of",
                        "schema": {
                            "$ref": "#/definitions/BlockInfo"
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/chainService/explorer/blockInfo/{blockHash}": {
            "get": {
                "tags": [
                    "chainservice",
                    "revisionNeeded"
                ],
                "summary": "short block Info of the referenced block",
                "description": "returns blockInfo of the block with the given block hash",
                "parameters": [
                    {
                        "in": "path",
                        "name": "blockHash",
                        "description": "block hash of the requested block",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns the short info of the requested block",
                        "schema": {
                            "$ref": "#/definitions/BlockInfo"
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/chainService/explorer/nextBlockInfo/{blockHash}": {
            "get": {
                "tags": [
                    "chainservice",
                    "revisionNeeded"
                ],
                "summary": "short block Info of the next block",
                "description": "returns blockInfo of the next block",
                "parameters": [
                    {
                        "in": "path",
                        "name": "blockHash",
                        "description": "block hash of the block previous of the requested block",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns the short info of the requested block",
                        "schema": {
                            "$ref": "#/definitions/BlockInfo"
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/chainService/explorer/fullBlock/{blockHash}": {
            "get": {
                "tags": [
                    "chainservice",
                    "revisionNeeded"
                ],
                "summary": "full block data of the referenced block",
                "description": "returns all data stored in the block with the given block hash",
                "parameters": [
                    {
                        "in": "path",
                        "name": "blockHash",
                        "description": "block hash of the requested block",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns full block data of the requested block",
                        "schema": {
                            "$ref": "#/definitions/FullBlock"
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ubirch/keyregistry/pubkey": {
            "post": {
                "tags": [
                    "key registry",
                    "2BImplemented",
                    "revisionNeeded"
                ],
                "summary": "stores new public key",
                "description": "stores the given public key with its unique pubKeyID",
                "parameters": [
                    {
                        "in": "body",
                        "name": "pubkey",
                        "description": "the new public key object with the pubKey that should be stored for the unique pubKeyId - also part of the pub key object - in the key registry to be able to find the public key; pubKeyId may not exist already",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PubKeyObject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns the new created pubKeyObject",
                        "schema": {
                            "$ref": "#/definitions/PubKeyObject"
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ubirch/keyregistry/pubkey/{pubkeyid}": {
            "put": {
                "tags": [
                    "key registry",
                    "2BImplemented",
                    "revisionNeeded"
                ],
                "summary": "updates public key",
                "description": "updates the given public key found by pubKeyID in the key registry with the given data; the public key must exist already",
                "parameters": [
                    {
                        "name": "pubkeyid",
                        "in": "path",
                        "description": "unique id of the public key; pubKeyId must exist already in the keyRegistry",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "in": "body",
                        "name": "pubkey",
                        "description": "the public key object with the new pubKey data that the existing pubKey should be updated with",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PubKeyObject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns the updated pubKeyObject",
                        "schema": {
                            "$ref": "#/definitions/PubKeyObject"
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "key registry",
                    "2BImplemented",
                    "revisionNeeded"
                ],
                "summary": "get public key",
                "description": "returns the public key for the given pubKeyID from the key registry",
                "parameters": [
                    {
                        "name": "pubkeyid",
                        "in": "path",
                        "description": "unique id of the public key to find it in the key registry",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns the requested pubKeyObject",
                        "schema": {
                            "$ref": "#/definitions/PubKeyObject"
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "key registry",
                    "2BImplemented",
                    "revisionNeeded"
                ],
                "summary": "delete public key",
                "description": "deletes the public key for the given pubKeyID from the key registry",
                "parameters": [
                    {
                        "name": "pubkeyid",
                        "in": "path",
                        "description": "unique id of the public key to find it in the key registry",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns the pubKeyObject that has been deleted from the keyRegistry",
                        "schema": {
                            "$ref": "#/definitions/PubKeyObject"
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ubirch/keyregistry/handshake": {
            "post": {
                "tags": [
                    "handshake",
                    "2BImplemented",
                    "revisionNeeded"
                ],
                "summary": "new handshake",
                "description": "initiates a new handshake",
                "parameters": [
                    {
                        "in": "body",
                        "name": "handshake",
                        "description": "the necessary data to initiate a handshake that are the pubKeyIds of both handshake parties",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/HandshakeObject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns the new created handshakeObject; the keyRegistry has added the following\n\n- pubKeys of both handshake parties\n- state = init\n- new unique handshake id",
                        "schema": {
                            "$ref": "#/definitions/HandshakeObject"
                        }
                    },
                    "400": {
                        "description": "Not successful response; fails if\n\n- pubKeyId(s) of handshake party is missing\n- if no pubKey can be found for one or both pubKeyIds\n- dataset creation failed\n- the keyRegistry isn't reachable",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ubirch/keyregistry/handshake/{handshakeid}": {
            "get": {
                "tags": [
                    "handshake",
                    "2BImplemented",
                    "revisionNeeded"
                ],
                "summary": "returns handshake data",
                "description": "returns the full handshake dataset of the handshake identified by the handshake id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "handshakeid",
                        "description": "id of the requested handshake",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns the requested handshakeObject",
                        "schema": {
                            "$ref": "#/definitions/HandshakeObject"
                        }
                    },
                    "400": {
                        "description": "Not successful response; fails if\n\n- handshakeid is missing\n- if no handshake can be found for the given handshakeid\n- the keyRegistry isn't reachable",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "handshake",
                    "2BImplemented",
                    "revisionNeeded"
                ],
                "summary": "updates handshake data",
                "description": "updates the handshake dataset found by handshake id in the key registry with the given data",
                "parameters": [
                    {
                        "in": "path",
                        "name": "handshakeid",
                        "description": "id of the handshake that shall be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "handshake",
                        "description": "the necessary data to update a handshake",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/HandshakeObject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns the handshakeObject updated with the new data",
                        "schema": {
                            "$ref": "#/definitions/HandshakeState"
                        }
                    },
                    "400": {
                        "description": "Not successful response; fails if\n\n- handshakeid is missing\n- if no handshake can be found for the given handshakeid\n- if the triggered state transition isn't valid\n- the keyRegistry isn't reachable",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "handshake",
                    "2BImplemented",
                    "revisionNeeded"
                ],
                "summary": "deletes handshake",
                "description": "deletes the handshake dataset identified by the handshake id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "handshakeid",
                        "description": "id of the handshake that shall be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns the handshakeObject that has been deleted from the keyRegistry",
                        "schema": {
                            "$ref": "#/definitions/HandshakeState"
                        }
                    },
                    "400": {
                        "description": "Not successful response; fails if\n\n- handshakeid is missing\n- if no handshake can be found for the given handshakeid\n- if the triggered state transition isn't valid\n- the keyRegistry isn't reachable",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ubirch/keyregistry/handshake/open/{pubkeyid}": {
            "get": {
                "tags": [
                    "handshake",
                    "2BImplemented",
                    "revisionNeeded"
                ],
                "summary": "returns open handshakes",
                "description": "returns a full list of all handshakes in an open state for this pubKeyId as an array;  handshakeObjects are returned",
                "parameters": [
                    {
                        "in": "path",
                        "name": "pubkeyid",
                        "description": "id of the pubKey that wants to lookup its open handshakes",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns the requested handshakeObjects as an array",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/HandshakeObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Not successful response; fails if\n\n- pubkeyid is missing\n- if no pubKey can be found for the pubkeyid\n- the keyRegistry isn't reachable",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ubirch/keyregistry/handshake/state/{handshakeid}": {
            "get": {
                "tags": [
                    "handshake",
                    "2BImplemented",
                    "revisionNeeded"
                ],
                "summary": "returns handshake state",
                "description": "returns the state of the handshake identified by the handshake id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "handshakeid",
                        "description": "id of the requested handshake",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns the requested handshakeState",
                        "schema": {
                            "$ref": "#/definitions/HandshakeStateObject"
                        }
                    },
                    "400": {
                        "description": "Not successful response; fails if\n\n- handshakeid is missing\n- if no handshake can be found for the given handshakeid\n- the keyRegistry isn't reachable",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "handshake",
                    "2BImplemented",
                    "revisionNeeded"
                ],
                "summary": "updates handshake state",
                "description": "updates the state of the handshake identified by the handshake id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "handshakeid",
                        "description": "id of the handshake that shall be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "handshakestate",
                        "description": "the necessary data to update the state of a handshake",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/HandshakeStateObject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns the handshakeStateObject updated with the new state",
                        "schema": {
                            "$ref": "#/definitions/HandshakeStateObject"
                        }
                    },
                    "400": {
                        "description": "Not successful response; fails if\n\n- handshakeid is missing\n- if no handshake can be found for the given handshakeid\n- if the triggered state transition isn't valid\n- the keyRegistry isn't reachable",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ubirch/keyregistry/handshake/state/open/{pubkeyid}": {
            "get": {
                "tags": [
                    "handshake",
                    "2BImplemented",
                    "revisionNeeded"
                ],
                "summary": "returns states of all open handshakes",
                "description": "returns a full list of states for all handshakes in an open state for this pubKeyId as an array",
                "parameters": [
                    {
                        "in": "path",
                        "name": "pubkeyid",
                        "description": "id of the pubKey that wants to lookup its open handshakes",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns the requested handshakeStateObjects as an array",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/HandshakeStateObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Not successful response; fails if\n\n- pubkeyid is missing\n- if no pubKey can be found for the pubkeyid\n- the keyRegistry isn't reachable",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trackleService/cycle/night/{nightId}": {
            "get": {
                "tags": [
                    "trackle",
                    "2BImplemented"
                ],
                "summary": "night temperature curve",
                "description": "return the data that has been measured during the night",
                "parameters": [
                    {
                        "in": "path",
                        "name": "nightId",
                        "description": "id of the nightCurve; UUID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns the requested night temperature curve",
                        "schema": {
                            "$ref": "#/definitions/NightTemperatureCurveObject"
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trackleService/cycle/list": {
            "get": {
                "tags": [
                    "trackle",
                    "2BImplemented"
                ],
                "summary": "list all cycles of a user",
                "description": "returns a list of all cycles of a user as info object\n\n- sorted by timestamp of cycledates\n- in descending order, newest cycle first, the oldest at the end of list\n- the current cycle is the element 0 of the list",
                "responses": {
                    "200": {
                        "description": "Successful response; returns list of cycle info objects",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CycleInfoObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trackleService/cycle/list/{from}": {
            "get": {
                "tags": [
                    "trackle",
                    "2BImplemented"
                ],
                "summary": "list of cycle infos for pagination with start index",
                "description": "returns a list of info cycle objects of a user starting from defined position\n\n- sorted by timestamp of cycledates\n- in descending order, newest cycle first, the oldest at the end of list\n- the current cycle is the element 0 of the list\n- the cycle no. 'from' is the last element of the list",
                "parameters": [
                    {
                        "in": "path",
                        "name": "from",
                        "description": "index of the oldest cycle we request; cycles ordered by ascending start dates",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns list of cycle info objects; for pagination, deliveres the defined part of the whole list",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CycleInfoObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trackleService/cycle/list/{from}/{size}": {
            "get": {
                "tags": [
                    "trackle",
                    "2BImplemented"
                ],
                "summary": "list of cycle infos for pagination with start index and length",
                "description": "returns a list of 'size' elements of info cycle objects of a user starting from defined position\n\n- sorted by timestamp of cycledates\n- in descending order, newest cycle first, the oldest at the end of list\n- the cycle no. 'from' is the last element of the list\n- the cycle number 'from' - 'size' is the element 0 of the list",
                "parameters": [
                    {
                        "in": "path",
                        "name": "from",
                        "description": "index of the oldest cycle we request; cycles ordered by ascending start dates",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "size",
                        "description": "number of cycles we request; starting from the cycle defined by 'from' to the past",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns list of cycle info objects; for pagination, deliveres the defined part of the whole list",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CycleInfoObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trackleService/cycle/id/{cycleId}": {
            "get": {
                "tags": [
                    "trackle",
                    "2BImplemented"
                ],
                "summary": "GET cycle data",
                "description": "returns\n\n- the basal temperature values (= the lowest measured temperature value of each night) calculated from the night temperature values of every night of that cycle\n- information about\n- menstruation\n- ovulation\n- fertile phase\n- possibly additional properties",
                "parameters": [
                    {
                        "in": "path",
                        "name": "cycleId",
                        "description": "id of the cycle curve",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns the requested cycle data",
                        "schema": {
                            "$ref": "#/definitions/CycleCurveObject"
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "trackle",
                    "2BImplemented"
                ],
                "summary": "EDIT cycle data",
                "description": "edits the data supplied in the request body of the specified cycle",
                "parameters": [
                    {
                        "in": "path",
                        "name": "cycleId",
                        "description": "id of the cycle curve that shall be edited",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "cycle",
                        "description": "cycle object specifying the data of the curve that shall be edited",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CycleCurveObject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns the updated cycle data",
                        "schema": {
                            "$ref": "#/definitions/CycleCurveObject"
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "trackle",
                    "2BImplemented"
                ],
                "summary": "DELETE cycle data",
                "description": "deletes the specified cycle\n\n- a normal trackle user can only delete the current cycle\n- with admin rights all cycles can be removed\n- only the cycle structure is removed\n- the underlying stored temperature data are not deleted by this endpoint\n- because the menstruation start date of the cycle is removed, the data belongs to the previous cycle after deleting a cycle\n- if a user deletes the current cycle, the previous cycles becomes the current cycle",
                "parameters": [
                    {
                        "in": "path",
                        "name": "cycleId",
                        "description": "id of the cycle curve that shall be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns the data of the previous cycle",
                        "schema": {
                            "$ref": "#/definitions/CycleCurveObject"
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trackleService/cycle/id/current": {
            "get": {
                "tags": [
                    "trackle",
                    "2BImplemented"
                ],
                "summary": "GET current cycle data",
                "description": "returns the current, not finished cycle",
                "responses": {
                    "200": {
                        "description": "Successful response; returns the data of the current cycle",
                        "schema": {
                            "$ref": "#/definitions/CycleCurveObject"
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trackleService/period/begin": {
            "post": {
                "tags": [
                    "trackle",
                    "2BImplemented"
                ],
                "summary": "sets the next period start date",
                "description": "the user inserts the date, when her next menstruation starts\n\n- only possible for the current menstrual cycle\n- finishes the currents cycle\n- creates a new 'current' cycle, starting with the inserted period start date",
                "parameters": [
                    {
                        "in": "body",
                        "name": "period",
                        "description": "cycle object containing the start date of the period; if a cycle id is contained it is ignored and replaced with a server created new cycle id; it is contained in the response object",
                        "schema": {
                            "$ref": "#/definitions/CycleCurveObject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response; returns the new created current cycle beginning with the inserted period start date",
                        "schema": {
                            "$ref": "#/definitions/CycleCurveObject"
                        }
                    },
                    "400": {
                        "description": "Not successful response",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "DeviceStubObject": {
            "description": "stub for devices CRUD, especcially for listing devices",
            "type": "object",
            "required": [
                "deviceId"
            ],
            "properties": {
                "deviceId": {
                    "description": "UUID, unique",
                    "type": "string"
                },
                "deviceName": {
                    "description": "name of the device, used in the UI; specified by user or generated on server; not necessarily unique",
                    "type": "string"
                },
                "deviceTypeKey": {
                    "description": "key of the device type; all specified device types can be accessed from the deviceType endpoint",
                    "type": "string"
                },
                "deviceLastUpdated": {
                    "type": "string",
                    "format": "date-time",
                    "description": "timestamp when the device sent or requested data the last time"
                },
                "inSync": {
                    "type": "boolean",
                    "description": "tells us if device and avatar are synchronised which means if they have the same state false = outofsync true = insync if not specified the syncState is unknown"
                }
            },
            "example": {
                "deviceId": "06983253-9097-47a9-b041-b56b054e160a",
                "deviceTypeKey": "lightsSensorTypeKey",
                "deviceName": "light_DE_Berlin_014",
                "deviceLastUpdated": "2016-06-29T21:50:13Z",
                "inSync": false
            }
        },
        "DeviceObject": {
            "description": "object for devices CRUD",
            "type": "object",
            "required": [
                "deviceId"
            ],
            "properties": {
                "deviceId": {
                    "description": "UUID, unique",
                    "type": "string"
                },
                "deviceName": {
                    "description": "name of the device, used in the UI; specified by user or generated on server; not necessarily unique",
                    "type": "string"
                },
                "deviceTypeKey": {
                    "description": "key of the device type; all specified device types can be accessed from the deviceType endpoint",
                    "type": "string"
                },
                "created": {
                    "description": "timestamp when record of this device is created in database",
                    "type": "string",
                    "format": "date-time"
                },
                "updated": {
                    "description": "timestamp of the last update of this database record",
                    "type": "string",
                    "format": "date-time"
                },
                "hwDeviceId": {
                    "description": "hardware device id",
                    "type": "string"
                },
                "hashedHwDeviceId": {
                    "description": "hashed hardware device id",
                    "type": "string"
                },
                "deviceProperties": {
                    "$ref": "#/definitions/DeviceProperties"
                },
                "deviceConfig": {
                    "$ref": "#/definitions/DeviceConfig"
                },
                "tags": {
                    "type": "array",
                    "description": "tags for filtering groups of devices",
                    "items": {
                        "type": "string"
                    }
                },
                "subscriptions": {
                    "type": "array",
                    "description": "list of devices this device has subscribed to - this device will receive values from them",
                    "items": {
                        "$ref": "#/definitions/Subscription"
                    }
                }
            }
        },
        "DeviceProperties": {
            "description": "object with the properties of a device",
            "type": "object",
            "example": {
                "language": "de",
                "testparam": "123"
            }
        },
        "DeviceConfig": {
            "description": "object with the configuration of a device",
            "type": "object",
            "example": {
                "i": 3600,
                "ir": 191,
                "s": 0
            }
        },
        "Subscription": {
            "description": "subscription of another device; new measurements of a device will be reported to its supscribers",
            "type": "object"
        },
        "DeviceState": {
            "description": "object with a state of a device",
            "type": "object",
            "properties": {
                "deviceId": {
                    "type": "string",
                    "description": "device id"
                },
                "messageId": {
                    "type": "string",
                    "description": "id of the message containing this device state"
                },
                "deviceType": {
                    "type": "string",
                    "description": "device type, e.g. lightsLamp, lightsSensor, temperatureSensor"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "timestamp when the device sent this state"
                },
                "deviceTags": {
                    "type": "array",
                    "description": "list of user defined tags for this device",
                    "items": {
                        "type": "string"
                    }
                },
                "deviceMessage": {
                    "type": "object",
                    "description": "device type dependent object containing the properties which describe the state of the device"
                },
                "avatarLastUpdated": {
                    "type": "string",
                    "format": "date-time",
                    "description": "timestamp when the avatar (digital representation of this device) was updated the last time; if e.g. a lamp gets its color value from a sensor, the avatar of the lamp is updated when the sensor sends new data; the avatar has different states in desired and reported until the lamps fetches the new values"
                }
            }
        },
        "DeviceType": {
            "description": "object containing properties of a device type",
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                }
            },
            "example": {
                "key": "lightsSensorTypeKey",
                "name": {
                    "de": "Lichtsensor",
                    "en": "lightssensor"
                },
                "icon": "ion-ios-lightbulb",
                "defaults": {
                    "properties": {
                        "countryCode": "unknown"
                    },
                    "config": {
                        "i": 3600,
                        "ir": 191,
                        "s": 0
                    },
                    "tags": []
                }
            }
        },
        "SignedPackage": {
            "description": "signature wrapper for any payload",
            "type": "object",
            "discriminator": "signedPackage",
            "properties": {
                "signature": {
                    "type": "string",
                    "description": "signature of this package signes the payload"
                },
                "pubKey": {
                    "type": "string",
                    "description": "the pub key to check the signature"
                },
                "version": {
                    "type": "string",
                    "description": "API version"
                },
                "created": {
                    "type": "integer",
                    "format": "int64",
                    "description": "timestamp of creation date, will be generated on server at creation time"
                }
            }
        },
        "PubKey": {
            "description": "public key object with the pubKey and it's unique pubKeyId",
            "type": "object",
            "properties": {
                "pubKey": {
                    "type": "string",
                    "description": "the public key"
                },
                "id": {
                    "type": "string",
                    "description": "the unique id used to find this public key in the key registry"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "fingerprint checksum for this public key"
                }
            }
        },
        "Handshake": {
            "description": "transfer of data and collected information for a handshake process",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "the unique id of this handshake in the key registry"
                },
                "status": {
                    "$ref": "#/definitions/HandshakeState"
                },
                "initiator": {
                    "$ref": "#/definitions/HandshakeParty"
                },
                "responder": {
                    "$ref": "#/definitions/HandshakeParty"
                }
            }
        },
        "HandshakeState": {
            "type": "string",
            "description": "indicates the state of this handshake process",
            "default": "undefined",
            "enum": [
                "undefined",
                "init",
                "validateInitiator",
                "trustInitiator",
                "initiatorValidationFailed",
                "validateResponder",
                "trustResponder",
                "responderValidationFailed",
                "successful",
                "unsuccessful",
                "finishedSuccessful",
                "finishedUnsuccessful",
                "timeout",
                "aborted",
                "deleted"
            ]
        },
        "HandshakeParty": {
            "type": "object",
            "description": "public key and nonce to check key of this party",
            "required": [
                "pubKeyRef"
            ],
            "properties": {
                "pubKeyRef": {
                    "$ref": "#/definitions/PubKey"
                },
                "nonce": {
                    "$ref": "#/definitions/Nonce"
                }
            }
        },
        "Nonce": {
            "type": "object",
            "description": "both parties of the handshake ask the other side to decrypt a random value (nonce), it encrypted with the public key of the other side, to check the correctness of this public key",
            "properties": {
                "value": {
                    "type": "string",
                    "description": "test phrase (nonce), encrypted with pubKey or decrypted as plaintext"
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "if true then the value of this nonce is encrypted, if false then it's decrypted and in plain text"
                }
            }
        },
        "PubKeyObject": {
            "description": "public key object with the pubKey and it's unique pubKeyId",
            "allOf": [
                {
                    "$ref": "#/definitions/SignedPackage"
                },
                {
                    "type": "object",
                    "required": [
                        "payload"
                    ],
                    "properties": {
                        "payload": {
                            "type": "object",
                            "required": [
                                "pubKeyRef"
                            ],
                            "properties": {
                                "pubKeyRef": {
                                    "$ref": "#/definitions/PubKey"
                                }
                            }
                        }
                    }
                }
            ]
        },
        "HandshakeObject": {
            "type": "object",
            "description": "handshake object transfers content required to perform a handshake between two parties",
            "allOf": [
                {
                    "$ref": "#/definitions/SignedPackage"
                },
                {
                    "type": "object",
                    "required": [
                        "payload"
                    ],
                    "properties": {
                        "payload": {
                            "type": "object",
                            "required": [
                                "handshake"
                            ],
                            "properties": {
                                "handshake": {
                                    "$ref": "#/definitions/Handshake"
                                }
                            }
                        }
                    }
                }
            ]
        },
        "HandshakeStateObject": {
            "type": "object",
            "description": "transfers the state of a handshake",
            "allOf": [
                {
                    "$ref": "#/definitions/SignedPackage"
                },
                {
                    "type": "object",
                    "required": [
                        "payload"
                    ],
                    "properties": {
                        "payload": {
                            "type": "object",
                            "required": [
                                "id",
                                "status"
                            ],
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "the unique id of this handshake in the key registry"
                                },
                                "status": {
                                    "$ref": "#/definitions/HandshakeState"
                                }
                            }
                        }
                    }
                }
            ]
        },
        "BlockInfo": {
            "type": "object",
            "description": "short information abaut this chaining block",
            "properties": {
                "hash": {
                    "type": "string",
                    "description": "the hash value of the block, in which the event hash of the message has been mined"
                },
                "previousBlockHash": {
                    "type": "string",
                    "description": "the hash value of the previous block of the block, in which the event hash of the message has been mined"
                },
                "number": {
                    "type": "integer",
                    "description": "block number"
                },
                "created": {
                    "type": "string",
                    "format": "time-date",
                    "description": "timestamp of the creation of this block"
                },
                "version": {
                    "type": "string",
                    "description": "version of format"
                },
                "anchors": {
                    "type": "array",
                    "description": "anchors which which this block and the previous blocks are anchored in bitcoin or etherium chain for notarization",
                    "items": {
                        "$ref": "#/definitions/NotaryAnchor"
                    }
                }
            }
        },
        "FullBlock": {
            "type": "object",
            "description": "full information abaut this chaining block containing the merkle tree",
            "allOf": [
                {
                    "$ref": "#/definitions/BlockInfo"
                },
                {
                    "type": "object",
                    "properties": {
                        "hashes": {
                            "type": "array",
                            "description": "array of all hashes this block contains",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            ]
        },
        "NotaryAnchor": {
            "type": "object",
            "description": "bitcoin or etherium anchor to notarize this block and the predecessing blocks"
        },
        "TemperatureObject": {
            "type": "object",
            "description": "temperature value with timestamp of the measurement; can contain additional properties especially that this item is one of the lowest, a basal value, or a flag that and why this value should be ignored",
            "properties": {
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the timestamp when this temperature is measured by the trackle sensor"
                },
                "temperature": {
                    "type": "number",
                    "format": "float",
                    "description": "temperature value"
                },
                "basal": {
                    "type": "boolean",
                    "default": false,
                    "description": "if true then this item is a basal value as much as to say that this one of the values with the lowest temperature value of the whole nicht"
                },
                "ignore": {
                    "type": "boolean",
                    "default": false,
                    "description": "if true then this item should be ignored"
                },
                "ignoreComment": {
                    "type": "string",
                    "description": "if ignore = true this contains the reason why this value should be ignored"
                }
            },
            "example": {
                "timestamp": "2016-09-01T23:50:38.001Z",
                "temperature": 35.2,
                "basal": true,
                "ignore": true,
                "ignoreComment": "out of body"
            }
        },
        "BasalTemperatureObject": {
            "type": "object",
            "description": "basal temperature value\n- the lowest measured temperature value in the corresponding night - with timestamp of the first measurement of this value - can contain additional properties, the user has inserted in the UI for this day/night",
            "properties": {
                "nightId": {
                    "type": "string",
                    "description": "id of the nightTemperatureCurve; for drilldown to night temperature in cycle chart"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the timestamp when the lowest temperature is measured the first time by the trackle sensor"
                },
                "temperature": {
                    "type": "number",
                    "format": "float",
                    "description": "basal temperature value"
                }
            },
            "example": {
                "timestamp": "2016-09-01T23:50:38.001Z",
                "temperature": 35.2,
                "nightId": "fb8bce6a-d7cb-4288-9aee-04ca627ab364"
            }
        },
        "NightTemperatureCurveObject": {
            "type": "object",
            "required": [
                "id",
                "temperatures"
            ],
            "description": "contains the measured temperature values of one night\nthe data has already been cleaned\n- no duplicated values - no senseless values - cut off start and end values, during which the sensor isn't already in body or has not yet settled",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique id of this night temperature curve"
                },
                "temperatures": {
                    "description": "all measured temperature values of the night\n- sorted by timestamp - in ascending order - with unique timestamps - intervals between timestamps do not need to be equal\n- first item contains a time-date string - the second one a float value with two digits after decimal point",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TemperatureObject"
                    }
                }
            },
            "example": {
                "id": "fb8bce6a-d7cb-4288-9aee-04ca627ab364",
                "temperatures": [
                    {
                        "timestamp": "2016-09-01T23:50:38.001Z",
                        "temperature": 35.2,
                        "ignore": true,
                        "ignoreComment": "out of body"
                    },
                    {
                        "timestamp": "2016-09-01T23:51:38.001Z",
                        "temperature": 36.25
                    },
                    {
                        "timestamp": "2016-09-01T23:52:49.001Z",
                        "temperature": 36.24
                    },
                    {
                        "timestamp": "2016-09-01T23:54:00.001Z",
                        "temperature": 36.2,
                        "basal": true
                    },
                    {
                        "timestamp": "2016-09-01T23:56:10.001Z",
                        "temperature": 35.21
                    },
                    {
                        "timestamp": "2016-09-01T23:57:20.001Z",
                        "temperature": 36.2,
                        "basal": true
                    },
                    {
                        "timestamp": "2016-09-01T23:58:27.001Z",
                        "temperature": 35.21
                    },
                    {
                        "timestamp": "2016-09-02T00:00:01.001Z",
                        "temperature": 35.21
                    },
                    {
                        "timestamp": "2016-09-02T00:01:13.001Z",
                        "temperature": 35.22
                    }
                ]
            }
        },
        "DateWithPrognosis": {
            "description": "date object with flag, if this date is specified by user or is a calculated prognosis",
            "type": "object",
            "required": [
                "date"
            ],
            "properties": {
                "date": {
                    "type": "string",
                    "format": "time-date"
                },
                "prognosis": {
                    "type": "boolean",
                    "default": false
                }
            },
            "example": {
                "date": "2016-09-01",
                "prognosis": true
            }
        },
        "CycleInfoObject": {
            "type": "object",
            "description": "info object for cycle curves; short info of a cycle; especcially for listing cycles and to organize all cycles of a user",
            "required": [
                "id",
                "begin"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique id of this cycle curve"
                },
                "begin": {
                    "type": "string",
                    "format": "time-date"
                },
                "end": {
                    "type": "string",
                    "format": "time-date"
                }
            }
        },
        "CycleCurveObject": {
            "type": "object",
            "required": [
                "id",
                "basalTemperatures"
            ],
            "description": "contains the cycle relevant data like\n\n- all calculated basal temperature values of this cycle\n- start and end of the cycle, possibly prognosticated\n- start and end of the menstruation\n- start and end of the fertile phase with the date of the ovulation if calculated, possibly prognosticated\n- optionally addition properties",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique id of this cycle curve"
                },
                "begin": {
                    "$ref": "#/definitions/DateWithPrognosis"
                },
                "end": {
                    "$ref": "#/definitions/DateWithPrognosis"
                },
                "basalTemperatures": {
                    "type": "array",
                    "description": "all calculated basal temperature values of this cycle\n- sorted by timestamp - in ascending order - at most one item per day - intervals between timestamps do not need to be equal",
                    "items": {
                        "$ref": "#/definitions/BasalTemperatureObject"
                    }
                },
                "period": {
                    "type": "object",
                    "description": "values to display the area of menstruation at the beginning of the cycle",
                    "properties": {
                        "begin": {
                            "$ref": "#/definitions/DateWithPrognosis"
                        },
                        "end": {
                            "$ref": "#/definitions/DateWithPrognosis"
                        }
                    }
                },
                "fertile": {
                    "type": "object",
                    "description": "values to display the area of fertile phase and ovulation",
                    "properties": {
                        "begin": {
                            "$ref": "#/definitions/DateWithPrognosis"
                        },
                        "end": {
                            "$ref": "#/definitions/DateWithPrognosis"
                        },
                        "ovulation": {
                            "$ref": "#/definitions/DateWithPrognosis"
                        }
                    }
                },
                "additionalInfos": {
                    "description": "every item of data can have additional properties; referenced by timestamp",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "timestamp": {
                                "type": "string",
                                "format": "date",
                                "description": "reference to the item of data array, this properties are assigned to"
                            },
                            "attributes": {
                                "type": "object",
                                "description": "key value pairs of properties"
                            }
                        }
                    }
                }
            },
            "example": {
                "id": "fb8bce6a-d7cb-4288-9aee-04ca627ea312",
                "begin": {
                    "date": "2016-10-01"
                },
                "end": {
                    "date": "2016-10-28",
                    "prognosis": true
                },
                "basalTemperatures": [
                    {
                        "timestamp": "2016-09-01T03:50:38.001Z",
                        "temperature": 36.22,
                        "nightId": "fb8bce6a-d7cb-4288-9aee-04ca627ab364"
                    },
                    {
                        "timestamp": "2016-09-02T04:01:38.001Z",
                        "temperature": 36.2,
                        "nightId": "04ca627ab-d7cb-4288-9aee-36fb8bce6a4"
                    },
                    {
                        "timestamp": "2016-09-05T04:34:02.001Z",
                        "temperature": 36.35,
                        "nightId": "d7cbce6a-fb8b-4288-04ca6-9aee27ab364"
                    }
                ],
                "period": {
                    "begin": {
                        "date": "2016-10-01"
                    },
                    "end": {
                        "date": "2016-10-05"
                    }
                },
                "fertile": {
                    "begin": {
                        "date": "2016-10-07",
                        "prognosis": true
                    },
                    "end": {
                        "date": "2016-10-15",
                        "prognosis": true
                    },
                    "ovulation": {
                        "date": "2016-10-13",
                        "prognosis": true
                    }
                },
                "dataprops": [
                    {
                        "timestamp": "2016-09-01T03:50:38.001Z",
                        "properties": {
                            "wellness": 3
                        }
                    }
                ]
            }
        },
        "ErrorResponse": {
            "type": "object",
            "description": "error object with error code and message",
            "required": [
                "apiVersion",
                "status",
                "error"
            ],
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "KO because it's an error"
                },
                "error": {
                    "type": "object",
                    "required": [
                        "errorId",
                        "errorMessage"
                    ],
                    "properties": {
                        "errorId": {
                            "type": "string",
                            "enum": [
                                "ErrorTimeOut",
                                "ErrorNotHandled",
                                "ErrorFatalIntern",
                                "ErrorMissingParams",
                                "ErrorPubKeyIdExists",
                                "ErrorInvalidPubKeyId",
                                "ErrorUpdatePubKey",
                                "ErrorParseJson",
                                "ErrorCannotDeletePubKey",
                                "ErrorHandshakeCannotFindDestination",
                                "ErrorHandshakeFailedTimeout",
                                "ErrorHandshakeFailedWrongResult",
                                "ErrorInvalidSignature",
                                "ErrorInvalidHandshakeId",
                                "ErrorHandshakeInterrupted",
                                "ErrorNoHandshakeState"
                            ]
                        },
                        "errorMessage": {
                            "type": "string",
                            "enum": [
                                "request could not be processed in time",
                                "request could not be handled",
                                "fatal internal error",
                                "missing parameters",
                                "given pubKeyId for new public key already exists",
                                "cannot find public key for given pubKeyId",
                                "public key for given pubKeyId cannot be updated",
                                "cannot parse incoming json doc",
                                "cannot delete PubKey from datatbase",
                                "cannot find destination given by pubKeyId",
                                "handshake failed because the destination didn't responde in time",
                                "Decrypted result value of handshake process isn't equal with encrypted random value",
                                "Verification of signature failed",
                                "Cannot find handshake data of given handshakeId",
                                "Handshake process has been interrupted by the other part",
                                "Cannot read handshake state of given handshakeId"
                            ]
                        }
                    }
                }
            }
        }
    }
}