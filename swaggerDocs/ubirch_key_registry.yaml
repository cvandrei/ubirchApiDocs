# Documentation of the ubirch key registry
# created 02.08.2016, 13:45 from Beate Fiss
# last update: 02.08.2016, 18:55
swagger: '2.0'
info:
  version: "1.0.0"
  title: ubirch key registry
  description:
  
    This is the definition of the ubirch key registry REST endpoint, where 
    
    - devices and apps can store their public keys with an unique ID
    
    - devices and apps can get public keys for a given pubKeyID
    
    - handshakes between devices and apps can be triggered
    
    - a list of all open handshake process steps for a pubKeyId can be polled
    
    - the state of a handshake can be requested
    
basePath: '/api/v1'

paths:

###############################################
#####           public keys CRUD          #####
###############################################

  '/ubirch/keyregistry/pubkey':
    post:
      tags:
        - key registry
      summary: stores new public key
      description: stores the given public key with its unique pubKeyID
      parameters:
        - in: body
          name: pubkey
          description: the new public key object with the pubKey that should be stored for the unique pubKeyId - also part of the pub key object - in the key registry to be able to find the public key; pubKeyId may not exist already
          required: true
          schema:
            $ref: '#/definitions/PubKeyObject'
      produces:
        - application/json
      responses:
        200:
          description: Successful response; returns the new created pubKeyObject
          schema:
            $ref: '#/definitions/PubKeyObject'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/ubirch/keyregistry/pubkey/{pubkeyid}':
    put:
      tags:
        - key registry
      summary: updates public key
      description: updates the given public key found by pubKeyID in the key registry with the given data; the public key must exist already
      parameters:
        - name: pubkeyid
          in: path
          description: unique id of the public key; pubKeyId must exist already in the keyRegistry
          required: true
          type: number
          format: integer
        - in: body
          name: pubkey
          description: the public key object with the new pubKey data that the existing pubKey should be updated with
          required: true
          schema:
            $ref: '#/definitions/PubKeyObject'
      produces:
        - application/json
      responses:
        200:
          description: Successful response; returns the updated pubKeyObject
          schema:
            $ref: '#/definitions/PubKeyObject'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'

    get:
      tags:
        - key registry
      summary: get public key
      description: returns the public key for the given pubKeyID from the key registry
      parameters:
        - name: pubkeyid
          in: path
          description: unique id of the public key to find it in the key registry
          required: true
          type: number
          format: integer
      produces:
        - application/json
      responses:
        200:
          description: Successful response; returns the requested pubKeyObject
          schema:
            $ref: '#/definitions/PubKeyObject'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'

    delete:
      tags:
        - key registry
      summary: delete public key
      description: deletes the public key for the given pubKeyID from the key registry
      parameters:
        - name: pubkeyid
          in: path
          description: unique id of the public key to find it in the key registry
          required: true
          type: number
          format: integer
      produces:
        - application/json
      responses:
        200:
          description: Successful response; returns the pubKeyObject that has been deleted from the keyRegistry
          schema:
            $ref: '#/definitions/PubKeyObject'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'
            
            
###############################################
#####           handshakes CRUD           #####
###############################################

  '/ubirch/keyregistry/handshake':
    post:
      tags:
        - handshake
      summary: new handshake
      description: initiates a new handshake
      parameters:
        - in: body
          name: handshake
          description: the necessary data to initiate a handshake that are the pubKeyIds of both handshake parties
          required: true
          schema:
            $ref: '#/definitions/HandshakeObject'
      produces:
        - application/json
      responses:
        200:
          description: Successful response; returns the new created handshakeObject; the keyRegistry has added the following
          
          
            - pubKeys of both handshake parties

            - state = init
            
            - new unique handshake id
          schema:
            $ref: '#/definitions/HandshakeObject'
        '400':
          description: Not successful response; fails if
          
          
            - pubKeyId(s) of handshake party is missing
            
            - if no pubKey can be found for one or both pubKeyIds
            
            - dataset creation failed
            
            - the keyRegistry isn't reachable
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/ubirch/keyregistry/handshake/{handshakeid}':
    get:
      tags:
        - handshake
      summary: returns handshake data
      description: returns the full handshake dataset of the handshake identified by the handshake id
      parameters:
        - in: path
          name: handshakeid
          description: id of the requested handshake
          required: true
          type: string
      produces:
        - application/json
      responses:
        200:
          description: Successful response; returns the requested handshakeObject
          schema:
            $ref: '#/definitions/HandshakeObject'
        '400':
          description: Not successful response; fails if
          
          
            - handshakeid is missing
            
            - if no handshake can be found for the given handshakeid
            
            - the keyRegistry isn't reachable
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - handshake
      summary: updates handshake data
      description: updates the handshake dataset found by handshake id in the key registry with the given data
      parameters:
        - in: path
          name: handshakeid
          description: id of the handshake that shall be updated
          required: true
          type: string
        - in: body
          name: handshake
          description: the necessary data to update a handshake
          required: true
          schema:
            $ref: '#/definitions/HandshakeObject'
      produces:
        - application/json
      responses:
        200:
          description: Successful response; returns the handshakeObject updated with the new data
          schema:
            $ref: '#/definitions/HandshakeState'
        '400':
          description: Not successful response; fails if
          
          
            - handshakeid is missing
            
            - if no handshake can be found for the given handshakeid
            
            - if the triggered state transition isn't valid
            
            - the keyRegistry isn't reachable
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - handshake
      summary: deletes handshake
      description: deletes the handshake dataset identified by the handshake id
      parameters:
        - in: path
          name: handshakeid
          description: id of the handshake that shall be deleted
          required: true
          type: string
      produces:
        - application/json
      responses:
        200:
          description: Successful response; returns the handshakeObject that has been deleted from the keyRegistry
          schema:
            $ref: '#/definitions/HandshakeState'
        '400':
          description: Not successful response; fails if
          
          
            - handshakeid is missing
            
            - if no handshake can be found for the given handshakeid
            
            - if the triggered state transition isn't valid
            
            - the keyRegistry isn't reachable
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/ubirch/keyregistry/handshake/open/{pubkeyid}':
    get:
      tags:
        - handshake
      summary: returns open handshakes
      description: returns a full list of all handshakes in an open state for this pubKeyId as an array;  handshakeObjects are returned
      parameters:
        - in: path
          name: pubkeyid
          description: id of the pubKey that wants to lookup its open handshakes
          required: true
          type: string
      produces:
        - application/json
      responses:
        200:
          description: Successful response; returns the requested handshakeObjects as an array
          schema:
            type: array
            items:
              $ref: '#/definitions/HandshakeObject'
        '400':
          description: Not successful response; fails if
          
          
            - pubkeyid is missing
            
            - if no pubKey can be found for the pubkeyid

            - the keyRegistry isn't reachable
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/ubirch/keyregistry/handshake/state/{handshakeid}':
    get:
      tags:
        - handshake
      summary: returns handshake state
      description: returns the state of the handshake identified by the handshake id
      parameters:
        - in: path
          name: handshakeid
          description: id of the requested handshake
          required: true
          type: string
      produces:
        - application/json
      responses:
        200:
          description: Successful response; returns the requested handshakeState
          schema:
            $ref: '#/definitions/HandshakeStateObject'
        '400':
          description: Not successful response; fails if
          
          
            - handshakeid is missing
            
            - if no handshake can be found for the given handshakeid

            - the keyRegistry isn't reachable
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - handshake
      summary: updates handshake state
      description: updates the state of the handshake identified by the handshake id
      parameters:
        - in: path
          name: handshakeid
          description: id of the handshake that shall be updated
          required: true
          type: string
        - in: body
          name: handshakestate
          description: the necessary data to update the state of a handshake
          required: true
          schema:
            $ref: '#/definitions/HandshakeStateObject'
      produces:
        - application/json
      responses:
        200:
          description: Successful response; returns the handshakeStateObject updated with the new state
          schema:
            $ref: '#/definitions/HandshakeStateObject'
        '400':
          description: Not successful response; fails if
          
          
            - handshakeid is missing
            
            - if no handshake can be found for the given handshakeid

            - if the triggered state transition isn't valid

            - the keyRegistry isn't reachable
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/ubirch/keyregistry/handshake/state/open/{pubkeyid}':
    get:
      tags:
        - handshake
      summary: returns states of all open handshakes
      description: returns a full list of states for all handshakes in an open state for this pubKeyId as an array
      parameters:
        - in: path
          name: pubkeyid
          description: id of the pubKey that wants to lookup its open handshakes
          required: true
          type: string
      produces:
        - application/json
      responses:
        200:
          description: Successful response; returns the requested handshakeStateObjects as an array
          schema:
            type: array
            items:
              $ref: '#/definitions/HandshakeStateObject'
        '400':
          description: Not successful response; fails if
          
          
            - pubkeyid is missing
            
            - if no pubKey can be found for the pubkeyid

            - the keyRegistry isn't reachable
          schema:
            $ref: '#/definitions/ErrorResponse'

            
definitions:
###########  wrapper for signed transfer  ###########
  SignedPackge:
    description: signature wrapper for any payload
    type: object
    discriminator: signedPackage
    properties:
      signature:
        type: string
        description: signature of this package signes the payload
      pubKey:
        type: string
        description: the pub key to check the signature
      version:
        type: string
        description: API version
      created:
        type: integer
        format: int64
        description: timestamp of creation date, will be generated on server at creation time

###########  objects  ###########
  PubKey:
    description: public key object with the pubKey and it's unique pubKeyId
    type: object
    properties:
      pubKey:
        type: string
        description: the public key
      id:
        type: string
        description: the unique id used to find this public key in the key registry
      fingerprint:
        type: string
        description: fingerprint checksum for this public key

  Handshake:
    description: transfer of data and collected information for a handshake process
    type: object
    properties:
      id:
        type: string
        description: the unique id of this handshake in the key registry
      status:
        $ref: '#/definitions/HandshakeState'
      initiator:
        $ref: '#/definitions/HandshakeParty'
      responder:
        $ref: '#/definitions/HandshakeParty'
        
  HandshakeState:
    type: string
    description: indicates the state of this handshake process
    default: undefined
    enum:
      - undefined
      - init
      - validateInitiator
      - trustInitiator
      - initiatorValidationFailed
      - validateResponder
      - trustResponder
      - responderValidationFailed
      - successful
      - unsuccessful
      - finishedSuccessful
      - finishedUnsuccessful
      - timeout
      - aborted
      - deleted

  HandshakeParty:
    type: object
    description: public key and nonce to check key of this party
    required:
      - pubKeyRef
    properties:
      pubKeyRef:
        $ref: '#/definitions/PubKey'
      nonce:
        $ref: '#/definitions/Nonce'
    
  Nonce:
    type: object
    description: both parties of the handshake ask the other side to decrypt a random value (nonce), it encrypted with the public key of the other side, to check the correctness of this public key
    properties:
      value:
        type: string
        description: test phrase (nonce), encrypted with pubKey or decrypted as plaintext
      encrypted:
        type: boolean
        description: if true then the value of this nonce is encrypted, if false then it's decrypted and in plain text


###########  transfer packages  ###########
  PubKeyObject:
    description: public key object with the pubKey and it's unique pubKeyId
    allOf:
      - $ref: '#/definitions/SignedPackge'
      - type: object
        required:
          - payload
        properties:
          payload:
            type: object
            required:
             - pubKeyRef
            properties:
              pubKeyRef:
                $ref: '#/definitions/PubKey'

  HandshakeObject:
    type: object
    description: handshake object transfers content required to perform a handshake between two parties 
    allOf:
      - $ref: '#/definitions/SignedPackge'
      - type: object
        required:
          - payload
        properties:
          payload:
            type: object
            required:
             - handshake
            properties:
              handshake:
                $ref: '#/definitions/Handshake'

  HandshakeStateObject:
    type: object
    description: transfers the state of a handshake
    allOf:
      - $ref: '#/definitions/SignedPackge'
      - type: object
        required:
          - payload
        properties:
          payload:
            type: object
            required:
             - id
             - status
            properties:
              id:
                type: string
                description: the unique id of this handshake in the key registry
              status:
                $ref: '#/definitions/HandshakeState'

  ErrorResponse:
    type: object
    description:
    
      error object with error code and message
      
    required:
      - apiVersion
      - status
      - error
    properties:
      apiVersion:
        type: string
      status:
        type: string
        description: KO because it's an error
      error:
        type: object
        required:
          - errorId
          - errorMessage
        properties:
          errorId:
            type: string
            enum:
              - "ErrorTimneOut"
              - "ErrorNotHandled"
              - "ErrorFatalIntern"
              - "ErrorMissingParams"
              - "ErrorPubKeyIdExists"
              - "ErrorInvalidPubKeyId"
              - "ErrorUpdatePubKey"
              - "ErrorParseJson"
              - "ErrorCannotDeletePubKey"
              - "ErrorHandshakeCannotFindDestination"
              - "ErrorHandshakeFailedTimeout"
              - "ErrorHandshakeFailedWrongResult"
              - "ErrorInvalidSignature"
              - "ErrorInvalidHandshakeId"
              - "ErrorHandshakeInterrupted"
              - "ErrorNoHandshakeState"
             
          errorMessage:
            type: string
            enum:
              - "request could not be processed in time"
              - "request could not be handled"
              - "fatal internal error"
              - "missing parameters"
              - "given pubKeyId for new public key already exists"
              - "cannot find public key for given pubKeyId"
              - "public key for given pubKeyId cannot be updated"
              - "cannot parse incoming json doc"
              - "cannot delete PubKey from datatbase"
              - "cannot find destination given by pubKeyId"
              - "handshake failed because the destination didn't responde in time"
              - "Decrypted result value of handshake process isn't equal with encrypted random value"
              - "Verification of signature failed"
              - "Cannot find handshake data of given handshakeId"
              - "Handshake process has been interrupted by the other part"
              - "Cannot read handshake state of given handshakeId"