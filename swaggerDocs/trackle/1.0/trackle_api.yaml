# Documentation of the trackle REST API
# created 23.11.2016, 10:50 from Beate Fiss
# last update: 14.12.2016, 15:48
swagger: '2.0'
info:
  version: "1.0.0"
  title: trackle REST API
  description:
  
    This is the definition of the trackle REST API containing the following parts:|
    
    - managing cycle data - CRUD

    - getting trackle RAW data of nights
    
    - endpoint to insert menstruation dates
    
    - get trackle devices of authenticated user
    
basePath: '/api/trackleService/v1'
produces: 
  - application/json
  
paths:

###############################################
#####           trackle Service           #####
###############################################

  /device/info/list:
    get:
      tags:
        - trackle
        - device
      summary: list of devices
      description: Query all available devices of authenticated user
      responses:
        200:
          description: Successful response; returns an array of trackle device info objects
          schema:
            type: array
            items:
              $ref: '#/definitions/DeviceInfoObject'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'
      
  /period/begin:
    post:
      tags:
        - trackle
        - cycle
      summary: sets a period begin date
      description: the user inserts the date, when her menstruation has begun; used to finish the current cycle or to start to initial cycle, when the user opens the app the first time
      
      
        - only possible for the current or initial menstrual cycle
        
        
        - creates a new 'current' cycle, starting with the inserted period start date
        
        
        - finishes the currents cycle if exists
        
      parameters:
        - in: body
          name: period
          description: period object containing the date of the beginning of the period and the device id of the used device
          schema:
            $ref: '#/definitions/PeriodObject'

      responses:
        200:
          description: Successful response; returns the new created current cycle beginning with the inserted period start date
          schema:
              $ref: '#/definitions/CycleObject'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'      

  '/cycle/info/list/{deviceId}':
    get:
      tags:
        - trackle
        - cycle
      summary: list of newest cycles of a user
      description: returns a list of the 10 (at most) newest cycles of a user as info object (the same as /cycle/info/list/0/10 )
      
      
        - sorted by timestamp of periodBegin ( = cycle begin)
        
        - in descending order, newest cycle first, the oldest at the end of list
        
        - the current cycle is the element 0 of the list

        - maximal 10 cycles - if exist - are returned in a list

      parameters:
        - in: path
          name: deviceId
          description: id of the device used to measure the temperatures
          required: true
          type: string
      responses:
        200:
          description: Successful response; returns list of cycle info objects
          schema:
            type: array
            items:
              $ref: '#/definitions/CycleInfoObject'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/cycle/info/list/{deviceId}/{from}':
    get:
      tags:
        - trackle
        - cycle
      summary: list of cycle infos for pagination with start index
      description: returns a list of 10 (at most) info cycle objects of a user starting from defined index
      
      
        - sorted by timestamp of periodBegin ( = cycle begin)
        
        - in descending order, newest cycle first, the oldest at the end of list
        
        - the cycle number 'from' is the newest cycle, so it's element 0 of the list
        
        - at most 10 cycles - if exist - that are older than the the 'from' cycle are returned in a list
      parameters:
        - in: path
          name: deviceId
          description: id of the device used to measure the temperatures
          required: true
          type: string
        - in: path
          name: from
          description: index of the newest cycle we request; cycles ordered by ascending start dates
          required: true
          type: string
      responses:
        200:
          description: Successful response; returns list of cycle info objects; for pagination, deliveres the defined part of the whole list
          schema:
            type: array
            items:
              $ref: '#/definitions/CycleInfoObject'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/cycle/info/list/{deviceId}/{from}/{size}':
    get:
      tags:
        - trackle
        - cycle
      summary: list of cycle infos for pagination with start index and number of maximum list items
      description: returns a list of info cycle objects of a user starting from defined in 'from' index with at most 'size' number of items
      
      
        - sorted by timestamp of periodBegin ( = cycle begin)
        
        - in descending order, newest cycle first, the oldest at the end of list
        
        - the cycle number 'from' is the newest cycle, so it's element 0 of the list
        
        - at most 'size' number of cycles - if exist - that are older than the the 'from' cycle are returned in a list
      parameters:
        - in: path
          name: deviceId
          description: id of the device used to measure the temperatures
          required: true
          type: string
        - in: path
          name: from
          description: index of the newest cycle we request; cycles ordered by ascending start dates
          required: true
          type: string
        - in: path
          name: size
          description: number of cycles we request; starting from the cycle defined by 'from' to the past
          required: true
          type: string
      responses:
        200:
          description: Successful response; returns list of cycle info objects; for pagination, deliveres the defined part of the whole list
          schema:
            type: array
            items:
              $ref: '#/definitions/CycleInfoObject'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/cycle/id/{cycleId}':
    get:
      tags:
        - trackle
        - cycle
      summary: GET cycle data
      description: returns
      
      
        - the basal temperature values (= the lowest measured temperature value of each night) calculated from the night temperature values of every night of that cycle
        
        - information about
        
            - menstruation
            
            - ovulation
            
            - fertile phase
            
        - possibly additional properties
      parameters:
        - in: path
          name: cycleId
          description: id of the cycle
          required: true
          type: string
      responses:
        200:
          description: Successful response; returns the requested cycle data
          schema:
              $ref: '#/definitions/CycleObject'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - trackle
        - cycle
      summary: EDIT cycle data
      description: edits the data supplied in the request body of the specified cycle
      parameters:
        - in: path
          name: cycleId
          description: id of the cycle that shall be edited
          required: true
          type: string
        - in: body
          name: cycle
          description: cycle object specifying the data of the curve that shall be edited
          required: true
          schema:
              $ref: '#/definitions/CycleObject'
      responses:
        200:
          description: Successful response; returns the updated cycle data
          schema:
              $ref: '#/definitions/CycleObject'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'

    delete:
      tags:
        - trackle
        - cycle
        - 2BImplemented
      summary: DELETE cycle data
      description: deletes the specified cycle
      
      
        - a normal trackle user can only delete the current cycle
        
        - with admin rights all cycles can be removed
        
        - only the cycle structure is removed
        
        - the underlying stored temperature data are not deleted by this endpoint
        
        - because the menstruation start date of the cycle is removed, the data belongs to the previous cycle after deleting a cycle
        
        - if a user deletes the current cycle, the previous cycles becomes the current cycle
      parameters:
        - in: path
          name: cycleId
          description: id of the cycle curve that shall be deleted
          required: true
          type: string
      responses:
        200:
          description: Successful response; returns the data of the previous cycle
          schema:
              $ref: '#/definitions/CycleObject'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/cycle/id/current/{deviceId}':
    get:
      tags:
        - trackle
        - cycle
      summary: GET current cycle data
      description: returns the current, not finished cycle
      parameters:
        - in: path
          name: deviceId
          description: id of the device used to measure the temperatures
          required: true
          type: string
      responses:
        200:
          description: Successful response; returns the data of the current cycle
          schema:
              $ref: '#/definitions/CycleObject'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/cycle/night/{nightId}':
    get:
      tags:
        - trackle
        - night
      summary: night temperature curve
      description: return the data that has been measured during the night
      parameters:
        - in: path
          name: nightId
          description: id of the nightCurve; UUID
          required: true
          type: string
      responses:
        200:
          description: Successful response; returns the requested night temperature curve
          schema:
              $ref: '#/definitions/NightObject'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'

###########  trackle service objects  ###########
definitions:

  DeviceInfoObject:
    type: object
    description: short device info; should be a trackle device
    required:
      - deviceId
      - deviceName
      - deviceTypeKey
    properties:
      deviceId:
        type: string
        description: UUID of this device
      deviceName:
        type: string
        description: name or description of this device so that the user will know which device it is; can be set by a user or the administrator via ubirch admin ui
      deviceTypeKey:
        type: string
        description: one of the keys, delivered by the device type list REST endpoint of the ubirch REST API; should be 'trackleSensor' here

  TemperatureObject:
    type: object
    description: temperature value with timestamp of the measurement; can contain additional properties especially that this item is one of the lowest, a basal value, or a flag that and why this value should be ignored
    required:
      - id
      - timestamp
      - temp
    properties:
      id:
        type: string
        description: UUID of the message sent from sensor containing this temperature value
      deviceId:
        type: string
        description: UUID of the trackle sensor the message containing this temperature value was sent from
      timestamp:
        type: string
        format: date-time
        description: the timestamp of the message; when this temperature value is measured by the trackle sensor
      temp:
        type: number
        format: float
        description: temperature value
      basal:
        type: boolean
        default: false
        description: if true then this item is a basal value as much as to say that this one of the values with the lowest temperature value of the whole nicht
      ignore:
        type: boolean
        default: false
        description: if true then this item should be ignored
      ignoreComment:
        type: string
        description: if ignore = true this contains the reason why this value should be ignored
    example:
      {
        "id": "18ceb213-7549-4e5c-914a-8c7b6f4bcdd7",
        "deviceId": "d971aca0-7769-401b-a402-6c42c22be847",
        "timestamp": "2016-06-04T23:41:58.887Z",
        "temp": 36.019999999999996,
        "basal": true,
        "ignore": true,
        "ignoreComment": "out of body"
      }

  BasalTemperatureObject:
    type: object
    description: basal temperature value
      
      - the lowest measured temperature value in the corresponding night
      - with timestamp of the first measurement of this value
      - can contain additional properties, the user has inserted in the UI for this day/night
    required:
      - nightId
      - timestamp
      - temperature
    properties:
      nightId:
        type: string
        description: id of the nightTemperatureCurve; for drilldown to night temperature in cycle chart
      timestamp:
        type: string
        format: date-time
        description: the timestamp when the lowest temperature is measured the first time by the trackle sensor
      temperature:
        type: number
        format: float
        description: basal temperature value
    example:
      {
        "timestamp": '2016-09-01T23:50:38.001Z',
        "temperature": 36.040000000000006,
        "nightId": 'fb8bce6a-d7cb-4288-9aee-04ca627ab364'
      }
    
        
  NightObject:
    type: object
    required:
      - id
      - deviceId
      - temperatures
    description: contains the measured temperature values of one night
      
      the data has been cleaned already
      
      - no duplicated values
      - no senseless values
      - cut off start and end values, during which the sensor isn't already in body or has not yet settled
      
      the data whith the basal values (minimum) are marked
    
    properties:
      id:
        type: string
        description: unique id of this night temperature curve; is used to drill down from cycle curve to night curve
      deviceId:
        type: string
        description: UUID of the trackle sensor this temperature values were measured with
      from:
        type: string
        format: date-time
        description: the timestamp of the first temperature value measured in this night
      to:
        type: string
        format: date-time
        description: the timestamp of the last temperature value measured in this night
      temperatures:
        description:
          all measured temperature values of the night
        
          - sorted by timestamp
          - in ascending order
          - with unique timestamps
          - intervals between timestamps do not need to be equal
          - basal values (minimum) are marked
        type: array
        items:
          $ref: '#/definitions/TemperatureObject'

    example:
      {
        "id": 'fb8bce6a-d7cb-4288-9aee-04ca627ab364',
        "deviceId": "d971aca0-7769-401b-a402-6c42c22be847",
        "from": "2016-06-04T23:41:58.887Z",
        "to": "2016-06-05T08:27:24.413Z",
        "temperatures": [
          {
            "id": "18ceb213-7549-4e5c-914a-8c7b6f4bcdd7",
            "deviceId": "d971aca0-7769-401b-a402-6c42c22be847",
            "timestamp": "2016-06-04T23:42:56.323Z",
            "temperature": 35.20,
            "ignore": true,
            "ignoreComment": "out of body"
          },
          {
            "id": "1291b73e-bb7c-440c-a93b-9d75f3bcdb1c",
            "deviceId": "d971aca0-7769-401b-a402-6c42c22be847",
            "timestamp": "2016-06-04T23:41:58.887Z",
            "temp": 36.019999999999996,
            "basal": true
          },
          {
            "id": "d90ee0a6-e7b6-45c6-bf59-028d960bdeec",
            "deviceId": "d971aca0-7769-401b-a402-6c42c22be847",
            "timestamp": "2016-06-04T23:43:53.776Z",
            "temperature": 36.25
          }
        ]
      }

  CycleInfoObject:
    type: object
    description: info object for cycles; short info of a cycle; contains every info except the basalTemperatures array; especcially for listing cycles and to organize all cycles of a user
    required:
      - id
      - deviceId
      - periodBegin
      - periodEnd
      - cycleEnd
    properties:
      id:
        type: string
        description: unique id of this cycle
      deviceId:
        type: string
        description: UUID of the used device
      periodBegin:
        type: string
        format: time-date
        description: day when the menstruation of this cycle started; because a cycle starts with the menstruation phase this is also the cycle begin date
      periodEnd:
        type: object
        description: date when the menstruation ended; a 'prognosis' flag can be set if it's not clear if the menstruation is finished yet
        properties:
          date:
            type: string
            format: time-date
          prognosis:
            type: boolean
            default: false
      cycleEnd:
        type: object
        description: date of the cycle end; a cycle ends if the user inserts the next menstruation begin date; a 'prognosis' flag can be set if the cycle has not yet been finished by the insertion of the next menstruation begin
        properties:
          date:
            type: string
            format: time-date
          prognosis:
            type: boolean
            default: false
      fertileBegin:
        type: object
        description: optional the ovulation and fertile phase can be calculated; fertileBegin is the date of the begin of the fertile phase; before the ovulation is measured time range of the fertile phase is not clear and a 'prognosis' flag will be set
        properties:
          date:
            type: string
            format: time-date
          prognosis:
            type: boolean
            default: false
      fertileEnd:
        type: object
        description: optional the ovulation and fertile phase can be calculated; fertileEnd is the date of the end of the fertile phase; before the ovulation is measured time range of the fertile phase is not clear and a 'prognosis' flag will be set
        properties:
          date:
            type: string
            format: time-date
          prognosis:
            type: boolean
            default: false
      ovulation:
        type: object
        description: optional the ovulation and fertile phase can be calculated; ovulation contains the date of the ovulation; before the ovulation is measured it can be calculated from existing cycles and will be marked with a 'prognosis' flag
        properties:
          date:
            type: string
            format: time-date
          prognosis:
            type: boolean
            default: false

  CycleObject:
    description: contains the cycle relevant data like
    
    
       - all calculated basal temperature values of this cycle
       
       - start and end of the cycle, possibly prognosticated
       
       - start and end of the menstruation
       
       - start and end of the fertile phase with the date of the ovulation if calculated, possibly prognosticated
       
       - optionally addition properties
       
    allOf:
      - $ref: '#/definitions/CycleInfoObject'
      - type: object
        required:
          - basalTemperatures
        properties:
          basalTemperatures:
            type: array
            description:
              all calculated basal temperature values of this cycle
            
              - sorted by timestamp
              - in ascending order
              - at most one item per day
              - intervals between timestamps do not need to be equal
            items:
              $ref: '#/definitions/BasalTemperatureObject'
          additionalInfos:
            description:
              every item of data can have additional properties; referenced by timestamp
            type: array
            items:
              type: object
              properties:
                timestamp:
                  type: string
                  format: date
                  description: reference to the item of data array, this properties are assigned to
                attributes:
                  type: object
                  description: key value pairs of properties
        example:
          {
            "id": "3652c261-7d0c-4436-920c-2164fc074529",
            "deviceId": "d6b178dd-1d2f-44f9-9589-8390d3b0f33a",
            "periodBegin": "2016-06-28T12:14:45.370Z",
            "periodEnd": {
              "timestamp": "2016-07-03T12:14:45.370Z"
            },
            "cycleEnd": {
              "timestamp": "2016-07-26T12:14:45.369Z"
            },
            "ovulation": {
              "timestamp": "2016-07-12T12:14:45.370Z"
            },
            "fertileBegin": {
              "timestamp": "2016-07-07T12:14:45.370Z"
            },
            "fertileEnd": {
              "timestamp": "2016-07-14T12:14:45.370Z"
            },
            "basalTemperatures": [
              {
                "nightId": "31fc661c-2b99-4884-a605-ff0f99760906",
                "timestamp": "2016-07-04T12:14:45.370Z",
                "temperature": 36.31
              },
              {
                "nightId": "5e39dd02-7b16-4ff7-a70e-8385dd6de6d2",
                "timestamp": "2016-07-05T12:14:45.370Z",
                "temperature": 36.29
              },
              {
                "nightId": "42facad5-5047-43d3-9227-3fc7dc282ec4",
                "timestamp": "2016-07-06T12:14:45.370Z",
                "temperature": 36.28
              },
              {
                "nightId": "1643412c-fff4-4022-b2b8-2b369b227776",
                "timestamp": "2016-07-07T12:14:45.370Z",
                "temperature": 36.34
              }
            ]
          }
    
  PeriodObject:
    type: object
    description: period object containing the date of the beginning of the period and the device id of the used device
    required:
      - deviceId
      - periodBegin
    properties:
      deviceId:
        type: string
        description: UUID of the used device
      periodBegin:
        type: string
        format: date-time
        description: timestamp of the day, when the period began
      additionalInfos:
        type: object
        description:
          optionally additional properties can be added; any valid json will be accepted
    example:
      {
        "deviceId": "881984e7-4808-46aa-93df-45ede4e7d7a4",
        "periodBegin": "2016-11-16T00:00:00.000Z",
        "additionalInfos": {}
      }
      
    
###########  errors  ###########
  ErrorResponse:
    type: object
    description:
    
      error object with error code and message
      
    required:
      - apiVersion
      - status
      - error
    properties:
      apiVersion:
        type: string
      status:
        type: string
        description: KO because it's an error
      error:
        type: object
        required:
          - errorId
          - errorMessage
        properties:
          errorId:
            type: string
            enum:
              - "ErrorTimeOut"
              - "ErrorNotHandled"
              - "ErrorFatalIntern"
              - "ErrorMissingParams"
              - "ErrorParseJson"
              - "ErrorInvalidSignature"

          errorMessage:
            type: string
            enum:
              - "request could not be processed in time"
              - "request could not be handled"
              - "fatal internal error"
              - "missing parameters"
              - "cannot parse incoming json doc"
              - "Verification of signature failed"