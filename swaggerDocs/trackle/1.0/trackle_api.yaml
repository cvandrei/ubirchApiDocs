# Documentation of the trackle REST API
# created 23.11.2016, 10:50 from Beate Fiss
# last update: 23.11.2016, 11:10
swagger: '2.0'
info:
  version: "1.0.0"
  title: trackle REST API
  description:
  
    This is the definition of the trackle REST API containing the following parts:|
    
    - managing cycle data - CRUD

    - getting trackle RAW data of nights
    
    - endpoint to insert menstruation dates 
    
basePath: '/api/trackleService/v1'
produces: 
  - application/json
  
paths:

###############################################
#####           trackle Service           #####
###############################################

  '/cycle/night/{nightId}':
    get:
      tags:
        - trackle
        - 2BImplemented
      summary: night temperature curve
      description: return the data that has been measured during the night
      parameters:
        - in: path
          name: nightId
          description: id of the nightCurve; UUID
          required: true
          type: string
      responses:
        200:
          description: Successful response; returns the requested night temperature curve
          schema:
              $ref: '#/definitions/NightTemperatureCurveObject'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'

  /cycle/info/list:
    get:
      tags:
        - trackle
        - 2BImplemented
      summary: list all cycles of a user
      description: returns a list of all cycles of a user as info object
      
      
        - sorted by timestamp of cycledates
        
        - in descending order, newest cycle first, the oldest at the end of list
        
        - the current cycle is the element 0 of the list
      responses:
        200:
          description: Successful response; returns list of cycle info objects
          schema:
            type: array
            items:
              $ref: '#/definitions/CycleInfoObject'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/cycle/info/list/{from}':
    get:
      tags:
        - trackle
        - 2BImplemented
      summary: list of cycle infos for pagination with start index
      description: returns a list of info cycle objects of a user starting from defined position
      
      
        - sorted by timestamp of cycledates
        
        - in descending order, newest cycle first, the oldest at the end of list
        
        - the current cycle is the element 0 of the list
        
        - the cycle no. 'from' is the last element of the list
      parameters:
        - in: path
          name: from
          description: index of the oldest cycle we request; cycles ordered by ascending start dates
          required: true
          type: string
      responses:
        200:
          description: Successful response; returns list of cycle info objects; for pagination, deliveres the defined part of the whole list
          schema:
            type: array
            items:
              $ref: '#/definitions/CycleInfoObject'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/cycle/info/list/{from}/{size}':
    get:
      tags:
        - trackle
        - 2BImplemented
      summary: list of cycle infos for pagination with start index and length
      description: returns a list of 'size' elements of info cycle objects of a user starting from defined position
      
      
        - sorted by timestamp of cycledates
        
        - in descending order, newest cycle first, the oldest at the end of list
        
        - the cycle no. 'from' is the last element of the list
        
        - the cycle number 'from' - 'size' is the element 0 of the list
      parameters:
        - in: path
          name: from
          description: index of the oldest cycle we request; cycles ordered by ascending start dates
          required: true
          type: string
        - in: path
          name: size
          description: number of cycles we request; starting from the cycle defined by 'from' to the past
          required: true
          type: string
      responses:
        200:
          description: Successful response; returns list of cycle info objects; for pagination, deliveres the defined part of the whole list
          schema:
            type: array
            items:
              $ref: '#/definitions/CycleInfoObject'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/cycle/id/{cycleId}':
    get:
      tags:
        - trackle
        - 2BImplemented
      summary: GET cycle data
      description: returns
      
      
        - the basal temperature values (= the lowest measured temperature value of each night) calculated from the night temperature values of every night of that cycle
        
        - information about
        
            - menstruation
            
            - ovulation
            
            - fertile phase
            
        - possibly additional properties
      parameters:
        - in: path
          name: cycleId
          description: id of the cycle curve
          required: true
          type: string
      responses:
        200:
          description: Successful response; returns the requested cycle data
          schema:
              $ref: '#/definitions/CycleCurveObject'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - trackle
        - 2BImplemented
      summary: EDIT cycle data
      description: edits the data supplied in the request body of the specified cycle
      parameters:
        - in: path
          name: cycleId
          description: id of the cycle curve that shall be edited
          required: true
          type: string
        - in: body
          name: cycle
          description: cycle object specifying the data of the curve that shall be edited
          required: true
          schema:
              $ref: '#/definitions/CycleCurveObject'
      responses:
        200:
          description: Successful response; returns the updated cycle data
          schema:
              $ref: '#/definitions/CycleCurveObject'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'

    delete:
      tags:
        - trackle
        - 2BImplemented
      summary: DELETE cycle data
      description: deletes the specified cycle
      
      
        - a normal trackle user can only delete the current cycle
        
        - with admin rights all cycles can be removed
        
        - only the cycle structure is removed
        
        - the underlying stored temperature data are not deleted by this endpoint
        
        - because the menstruation start date of the cycle is removed, the data belongs to the previous cycle after deleting a cycle
        
        - if a user deletes the current cycle, the previous cycles becomes the current cycle
      parameters:
        - in: path
          name: cycleId
          description: id of the cycle curve that shall be deleted
          required: true
          type: string
      responses:
        200:
          description: Successful response; returns the data of the previous cycle
          schema:
              $ref: '#/definitions/CycleCurveObject'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'

  /cycle/id/current:
    get:
      tags:
        - trackle
        - 2BImplemented
      summary: GET current cycle data
      description: returns the current, not finished cycle
      responses:
        200:
          description: Successful response; returns the data of the current cycle
          schema:
              $ref: '#/definitions/CycleCurveObject'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'
  

  /period/begin:
    post:
      tags:
        - trackle
        - 2BImplemented
      summary: sets the next period start date
      description: the user inserts the date, when her next menstruation starts
      
      
        - only possible for the current menstrual cycle
        
        - finishes the currents cycle
        
        - creates a new 'current' cycle, starting with the inserted period start date
      parameters:
        - in: body
          name: period
          description: cycle object containing the start date of the period; if a cycle id is contained it is ignored and replaced with a server created new cycle id; it is contained in the response object
          schema:
            $ref: '#/definitions/CycleCurveObject'

      responses:
        200:
          description: Successful response; returns the new created current cycle beginning with the inserted period start date
          schema:
              $ref: '#/definitions/CycleCurveObject'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'      

definitions:
###########  trackle service objects  ###########

  TemperatureObject:
    type: object
    description: temperature value with timestamp of the measurement; can contain additional properties especially that this item is one of the lowest, a basal value, or a flag that and why this value should be ignored
    properties:
      timestamp:
        type: string
        format: date-time
        description: the timestamp when this temperature is measured by the trackle sensor
      temperature:
        type: number
        format: float
        description: temperature value
      basal:
        type: boolean
        default: false
        description: if true then this item is a basal value as much as to say that this one of the values with the lowest temperature value of the whole nicht
      ignore:
        type: boolean
        default: false
        description: if true then this item should be ignored
      ignoreComment:
        type: string
        description: if ignore = true this contains the reason why this value should be ignored
    example:
      {
        "timestamp": '2016-09-01T23:50:38.001Z',
        "temperature": 35.20,
        "basal": true,
        "ignore": true,
        "ignoreComment": "out of body"
      }

  BasalTemperatureObject:
    type: object
    description: basal temperature value
      
      - the lowest measured temperature value in the corresponding night
      - with timestamp of the first measurement of this value
      - can contain additional properties, the user has inserted in the UI for this day/night
    properties:
      nightId:
        type: string
        description: id of the nightTemperatureCurve; for drilldown to night temperature in cycle chart
      timestamp:
        type: string
        format: date-time
        description: the timestamp when the lowest temperature is measured the first time by the trackle sensor
      temperature:
        type: number
        format: float
        description: basal temperature value
    example:
      {
        "timestamp": '2016-09-01T23:50:38.001Z',
        "temperature": 35.20,
        "nightId": 'fb8bce6a-d7cb-4288-9aee-04ca627ab364'
      }
    
        
  NightTemperatureCurveObject:
    type: object
    required:
      - id
      - temperatures
    description: contains the measured temperature values of one night
      
      the data has already been cleaned
      
      - no duplicated values
      - no senseless values
      - cut off start and end values, during which the sensor isn't already in body or has not yet settled
    
    properties:
      id:
        type: string
        description: unique id of this night temperature curve
      temperatures:
        description:
          all measured temperature values of the night
        
          - sorted by timestamp
          - in ascending order
          - with unique timestamps
          - intervals between timestamps do not need to be equal
          
            - first item contains a time-date string
            - the second one a float value with two digits after decimal point
        type: array
        items:
          $ref: '#/definitions/TemperatureObject'

    example:
      {
        "id": 'fb8bce6a-d7cb-4288-9aee-04ca627ab364',
        "temperatures": [
          {
            "timestamp": '2016-09-01T23:50:38.001Z',
            "temperature": 35.20,
            "ignore": true,
            "ignoreComment": "out of body"
          },
          {
            "timestamp": '2016-09-01T23:51:38.001Z',
            "temperature": 36.25
          },
          {
            "timestamp": '2016-09-01T23:52:49.001Z',
            "temperature": 36.24
          },
          {
            "timestamp": '2016-09-01T23:54:00.001Z',
            "temperature": 36.20,
            "basal": true
          },
          {
            "timestamp": '2016-09-01T23:56:10.001Z',
            "temperature": 35.21
          },
          {
            "timestamp": '2016-09-01T23:57:20.001Z',
            "temperature": 36.20,
            "basal": true
          },
          {
            "timestamp": '2016-09-01T23:58:27.001Z',
            "temperature": 35.21
          },
          {
            "timestamp": '2016-09-02T00:00:01.001Z',
            "temperature": 35.21
          },
          {
            "timestamp": '2016-09-02T00:01:13.001Z',
            "temperature": 35.22
          }
        ]
      }

  DateWithPrognosis:
    description: date object with flag, if this date is specified by user or is a calculated prognosis
    type: object
    required:
      - date
    properties:
      date:
        type: string
        format: time-date
      prognosis:
        type: boolean
        default: false
    example:
      {
        "date": '2016-09-01',
        "prognosis": true
      }
    
  CycleInfoObject:
    type: object
    description: info object for cycle curves; short info of a cycle; especcially for listing cycles and to organize all cycles of a user
    required:
      - id
      - begin
    properties:
      id:
        type: string
        description: unique id of this cycle curve
      begin:
        type: string
        format: time-date
      end:
        type: string
        format: time-date

  CycleCurveObject:
    type: object
    required:
      - id
      - basalTemperatures
    description: contains the cycle relevant data like
    
    
       - all calculated basal temperature values of this cycle
       
       - start and end of the cycle, possibly prognosticated
       
       - start and end of the menstruation
       
       - start and end of the fertile phase with the date of the ovulation if calculated, possibly prognosticated
       
       - optionally addition properties
    properties:
      id:
        type: string
        description: unique id of this cycle curve
      begin:
        $ref: '#/definitions/DateWithPrognosis'
      end:
        $ref: '#/definitions/DateWithPrognosis'
      basalTemperatures:
        type: array
        description:
          all calculated basal temperature values of this cycle
        
          - sorted by timestamp
          - in ascending order
          - at most one item per day
          - intervals between timestamps do not need to be equal
        items:
          $ref: '#/definitions/BasalTemperatureObject'
      period:
        type: object
        description: values to display the area of menstruation at the beginning of the cycle
        properties:
          begin:
            $ref: '#/definitions/DateWithPrognosis'
          end:
            $ref: '#/definitions/DateWithPrognosis'
      fertile:
        type: object
        description: values to display the area of fertile phase and ovulation
        properties:
          begin:
            $ref: '#/definitions/DateWithPrognosis'
          end:
            $ref: '#/definitions/DateWithPrognosis'
          ovulation:
            $ref: '#/definitions/DateWithPrognosis'
      additionalInfos:
        description:
          every item of data can have additional properties; referenced by timestamp
        type: array
        items:
          type: object
          properties:
            timestamp:
              type: string
              format: date
              description: reference to the item of data array, this properties are assigned to
            attributes:
              type: object
              description: key value pairs of properties

    example:
      { 
        "id": 'fb8bce6a-d7cb-4288-9aee-04ca627ea312',
        "begin": {
          "date": '2016-10-01'
        },
        "end": {
          "date": '2016-10-28',
          "prognosis": true
        },
        "basalTemperatures": [
          {
            "timestamp": '2016-09-01T03:50:38.001Z',
            "temperature": 36.22,
            "nightId": 'fb8bce6a-d7cb-4288-9aee-04ca627ab364'
          },
          {
            "timestamp": '2016-09-02T04:01:38.001Z',
            "temperature": 36.20,
            "nightId": '04ca627ab-d7cb-4288-9aee-36fb8bce6a4'
          },
          {
            "timestamp": '2016-09-05T04:34:02.001Z',
            "temperature": 36.35,
            "nightId": 'd7cbce6a-fb8b-4288-04ca6-9aee27ab364'
          }
        ],
        "period": {
          "begin": {
            "date": '2016-10-01'
          },
          "end": {
            "date": '2016-10-05'
          }
        },
        "fertile": {
          "begin": {
            "date": '2016-10-07',
            "prognosis": true
          },
          "end": {
            "date": '2016-10-15',
            "prognosis": true
         },
         "ovulation": {
            "date": '2016-10-13',
            "prognosis": true
         }
       },
       "dataprops": [
          {
            "timestamp": '2016-09-01T03:50:38.001Z',
            "properties": {
              "wellness": 3
            }
          }
        ]
      }
    
###########  errors  ###########
  ErrorResponse:
    type: object
    description:
    
      error object with error code and message
      
    required:
      - apiVersion
      - status
      - error
    properties:
      apiVersion:
        type: string
      status:
        type: string
        description: KO because it's an error
      error:
        type: object
        required:
          - errorId
          - errorMessage
        properties:
          errorId:
            type: string
            enum:
              - "ErrorTimeOut"
              - "ErrorNotHandled"
              - "ErrorFatalIntern"
              - "ErrorMissingParams"
              - "ErrorParseJson"
              - "ErrorInvalidSignature"

          errorMessage:
            type: string
            enum:
              - "request could not be processed in time"
              - "request could not be handled"
              - "fatal internal error"
              - "missing parameters"
              - "cannot parse incoming json doc"
              - "Verification of signature failed"