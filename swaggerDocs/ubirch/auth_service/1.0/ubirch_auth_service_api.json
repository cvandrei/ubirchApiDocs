{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "ubirch auth service REST API",
    "description": "This is the definition of the ubirch auth service REST API containing the following parts:|\n- list of OpenID Connect provider (OP) configurations for specified context\n- verification and login\n- tokens management\n- signup\n- logout\n- userData access"
  },
  "schemes": [
    "https"
  ],
  "host": "auth.dev.ubirch.com",
  "basePath": "/api/authService/v1",
  "produces": [
    "application/json"
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "auth service"
        ],
        "summary": "Welcome / Health",
        "description": "Check if service is up and running",
        "responses": {
          "200": {
            "description": "Successful response; returnes status object with welcome message",
            "schema": {
              "$ref": "#/definitions/StatusResponse"
            }
          },
          "400": {
            "description": "Not successful response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/providerInfo/list/{context}/{appId}": {
      "get": {
        "tags": [
          "auth service",
          "providerlist"
        ],
        "summary": "provider list",
        "description": "Gives us a list of providers configured for a specific context",
        "parameters": [
          {
            "in": "path",
            "name": "context",
            "description": "the context (e.g. `trackle-local`, `ubirch-dev`, `ubirch-local`,...)",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "appId",
            "description": "the application id (e.g. `admin-ui`, `ui`, ...)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; returns array of OpenID Connect provider configurations for the given context",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenIDConnectProviderInfo"
              }
            }
          },
          "400": {
            "description": "Not successful response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/verify/code": {
      "post": {
        "tags": [
          "auth service",
          "token administration"
        ],
        "summary": "Verify Code",
        "description": "After a successful login at the OP users are being redirect to our frontend. That call includes a _context_, _providerId_, _code_ and _state_. Calling this method has the effect that our system verifies the code and responds with the resulting token. This token can then be used to request protected resources in other backend services.",
        "parameters": [
          {
            "in": "body",
            "name": "OPCredentials",
            "description": "Credentials from OP login including a _context_, _appId_, _providerId_, _code_ and _state_",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OPCredentials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; the code and state have been verified successfully and a resulting token is returned ",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "400": {
            "description": "Not successful response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "tags": [
          "auth service",
          "user service"
        ],
        "summary": "Register new user",
        "description": "Register a new user for an OP token; precondition - user is already authenticated by OP",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Bearer token identifying which user's info is being requested",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; registration successful; returns stored user data",
            "schema": {
              "$ref": "#/definitions/RegisterResponse"
            }
          },
          "400": {
            "description": "registration failed (more detailed information is provided by the error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/userInfo": {
      "get": {
        "tags": [
          "auth service",
          "user service"
        ],
        "summary": "GET user data",
        "description": "returns stored user data",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Bearer token identifying which user's info is being requested",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; returns stored user data",
            "schema": {
              "$ref": "#/definitions/UserInfoGetResponse"
            }
          },
          "400": {
            "description": "get failed (more detailed information is provided by the error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "auth service",
          "user service"
        ],
        "summary": "UPDATE user data",
        "description": "updates user data",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Bearer token identifying which user's info is being updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "userData",
            "description": "userData the stored userData shall be updated with containing the OP auth token to identify user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInfoUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; returns updated user data",
            "schema": {
              "$ref": "#/definitions/UserInfoUpdateResponse"
            }
          },
          "400": {
            "description": "update failed (more detailed information is provided by the error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/logout/{token}": {
      "get": {
        "tags": [
          "auth service",
          "token administration"
        ],
        "summary": "logout",
        "description": "logout; invalidates the token; user keeps logged in at the OP",
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "description": "token to be invalidated",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; logout is successful (or the token already expired)",
            "schema": {
              "type": "string",
              "enum": [
                "OK"
              ]
            }
          },
          "400": {
            "description": "Not successful response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "OpenIDConnectProviderInfo": {
      "type": "object",
      "description": "OpenID Connect provider configuration for a given context",
      "properties": {
        "context": {
          "type": "string",
          "description": "context of our application, e.g. trackle, trackle-dev, ubirch-admin-ui, for which this OP configuration is specified for"
        },
        "providerId": {
          "type": "string",
          "description": "ubirch internal OpenID Connect provider ID"
        },
        "name": {
          "type": "string",
          "description": "display name for the ubirch internal OpenID Connect provider ID"
        },
        "redirectUrl": {
          "type": "string",
          "description": "redirect url to open the login page of the OP; contains all required parameters for the redirection back to our context"
        }
      },
      "example": {
        "context": "trackle-dev",
        "providerId": "google",
        "name": "Google",
        "redirectUrl": "https://accounts.google.com/o/oauth2/v2/auth?response_type=code&client_id=370115332091-kqf5hu698s4sodrvv03ka3bule530rp5.apps.googleusercontent.com&redirect_uri=https%3A%2F%2Flocalhost%3A10000%2Foidc-callback-google&scope=openid&state=62dxXDHVXO4Do1oivEjdbVwXIIjegysg7KoRVBy7_II"
      }
    },
    "OPCredentials": {
      "type": "object",
      "description": "Credentials from OP login",
      "required": [
        "context",
        "appId",
        "providerId",
        "code",
        "state"
      ],
      "properties": {
        "context": {
          "type": "string",
          "description": "context of our application, e.g. trackle-local, trackle-dev, ubirch-demo"
        },
        "appId": {
          "type": "string",
          "description": "application id, e.g. admin-ui, ui"
        },
        "providerId": {
          "type": "string",
          "description": "ubirch internal OpenID Connect provider ID"
        },
        "code": {
          "type": "string",
          "description": "the code we obtained from OP, which has to be verified in our backend"
        },
        "state": {
          "type": "string",
          "description": "the state is used to maintain relation between request and callback; state was sent to the OP as part of the redirectUrl; each state can only be used once and is verified in backend"
        }
      },
      "example": {
        "context": "ubirch-dev",
        "appId": "admin-ui",
        "providerId": "google",
        "code": "4/Qem2JN-di08_u5KUcVCR7NQFR3qHmRcqwhkC2JSv3Sw",
        "state": "mTyOeZO6JRZLnrEPV9BYqbEh8Upf_f8JVdjvQpdU11k"
      }
    },
    "Token": {
      "type": "object",
      "description": "token to request protected resources in several of ours backend services",
      "required": [
        "token"
      ],
      "properties": {
        "token": {
          "type": "string",
          "description": "token to request protected resources"
        }
      },
      "example": {
        "token": "a_token_1234"
      }
    },
    "Group": {
      "type": "object",
      "description": "a group",
      "required": [
        "id",
        "displayName"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "internal id (UUID)"
        },
        "displayName": {
          "type": "string",
          "description": "human readable group name"
        }
      },
      "example": {
        "id": "a4c08d88-7c43-4984-a568-0672b4431016",
        "displayName": "my-ubirch-group"
      }
    },
    "RegisterResponse": {
      "type": "object",
      "description": "a user's registration information",
      "required": [
        "displayName",
        "myGroups",
        "allowedGroups"
      ],
      "properties": {
        "displayName": {
          "type": "string",
          "description": "human readable user name for display in the UI"
        },
        "myGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group"
          },
          "description": "groups a user owns in the context defined by the provided token"
        },
        "allowedGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group"
          },
          "description": "groups belonging to other people that a user can access, too"
        }
      },
      "example": {
        "displayName": "my display name",
        "myGroups": [
          {
            "id": "a4c08d88-7c43-4984-a568-0672b4431016",
            "displayName": "my private group"
          }
        ],
        "allowedGroups": []
      }
    },
    "UserInfoGetResponse": {
      "type": "object",
      "items": {
        "$ref": "#/definitions/RegisterResponse"
      },
      "example": {
        "displayName": "my display name",
        "myGroups": [
          {
            "id": "a4c08d88-7c43-4984-a568-0672b4431016",
            "displayName": "my private group"
          }
        ],
        "allowedGroups": [
          {
            "id": "f2d4280d-336f-438d-9b2a-70337723a3e7",
            "displayName": "my-best-friends-ubirch-group"
          },
          {
            "id": "32c5c928-97a0-49b7-9d71-0b0517b7d13e",
            "displayName": "another-friends-ubirch-group"
          }
        ]
      }
    },
    "UserInfoUpdateRequest": {
      "type": "object",
      "description": "update a user's info",
      "required": [
        "displayName"
      ],
      "properties": {
        "displayName": {
          "type": "string",
          "description": "human readable user name for display in the UI"
        }
      },
      "example": {
        "displayName": "my updated display name"
      }
    },
    "UserInfoUpdateResponse": {
      "type": "object",
      "items": {
        "$ref": "#/definitions/RegisterResponse"
      },
      "example": {
        "displayName": "my updated display name",
        "myGroups": [
          {
            "id": "a4c08d88-7c43-4984-a568-0672b4431016",
            "displayName": "my private group"
          }
        ],
        "allowedGroups": [
          {
            "id": "f2d4280d-336f-438d-9b2a-70337723a3e7",
            "displayName": "my-best-friends-ubirch-group"
          },
          {
            "id": "32c5c928-97a0-49b7-9d71-0b0517b7d13e",
            "displayName": "another-friends-ubirch-group"
          }
        ]
      }
    },
    "StatusResponse": {
      "type": "object",
      "description": "status object with status message",
      "required": [
        "apiVersion",
        "status",
        "message"
      ],
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "OK",
            "NOK"
          ],
          "description": "OK or NOK = not OK"
        },
        "message": {
          "type": "string",
          "description": "status description"
        }
      },
      "example": {
        "version": "1.0",
        "status": "OK",
        "message": "Welcome to the ubirchAuthService"
      }
    },
    "ErrorResponse": {
      "type": "object",
      "description": "error object with error code and message",
      "required": [
        "apiVersion",
        "status",
        "error"
      ],
      "properties": {
        "apiVersion": {
          "type": "string",
          "example": "1.0.0"
        },
        "status": {
          "type": "string",
          "description": "NOK because it's an error",
          "enum": [
            "NOK"
          ]
        },
        "error": {
          "type": "object",
          "required": [
            "errorId",
            "errorMessage"
          ],
          "properties": {
            "errorId": {
              "type": "string",
              "enum": [
                "ErrorTimeOut",
                "ErrorNotHandled",
                "ErrorFatalIntern",
                "ErrorMissingParams",
                "ErrorParseJson",
                "ErrorUserAlreadyExists",
                "ErrorNoUserForToken"
              ]
            },
            "errorMessage": {
              "type": "string",
              "enum": [
                "request could not be processed in time",
                "request could not be handled",
                "fatal internal error",
                "missing parameters",
                "cannot parse incoming json doc",
                "user already exists",
                "no user exists for given token"
              ]
            }
          }
        }
      }
    }
  }
}