swagger: '2.0'
info:
  version: 1.0.0
  title: ubirch auth service REST API
  description: >-
    This is the definition of the ubirch auth service REST API containing the
    following parts:|

    - list of OpenID Connect provider (OP) configurations for specified context

    - verification and login
    
    - tokens management
    
    - signup
    
    - logout
    
    - userData access
basePath: /api/authService/v1
produces:
  - application/json
paths:
  /:
    get:
      tags:
        - auth service
      summary: Welcome / Health
      description: >-
        Check if service is up and running
      responses:
        '200':
          description: >-
            Successful response; returnes status object with welcome message
          schema:
            $ref: '#/definitions/StatusResponse'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/providerInfo/list/{context}':
    get:
      tags:
        - auth service
        - providerlist
      summary: provider list
      description: 
        Gives us a list of providers configured for a specific context
      parameters:
        - in: path
          name: context
          description: the context (e.g. `trackle`, `trackle-dev`, `ubirch`, `ubirch-dev`,...)
          required: true
          type: string
      responses:
        '200':
          description: >-
            Successful response; returns array of OpenID Connect provider configurations for the given context
          schema:
            type: array
            items:
              $ref: '#/definitions/OpenIDConnectProviderInfo'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'
  /verify/code:
    post:
      tags:
        - auth service
        - token administration
      summary: Verify Code
      description:
        After a successful login at the OP users are being redirect to our frontend. That call includes a _context_, _providerId_, _code_ and _state_. Calling this method has the effect that our system verifies the code and responds with the resulting token.
        This token can then be used to request protected resources in other backend services.
      parameters:
        - in: body
          name: OPCredentials
          description: Credentials from OP login including a _context_, _providerId_, _code_ and _state_
          required: true
          schema:
            $ref: '#/definitions/OPCredentials'
      responses:
        '200':
          description: >-
            Successful response; the code and state have been verified successfully and a resulting token is returned 
          schema:
              $ref: '#/definitions/Token'
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'
  /register:
    get:
      tags:
        - auth service
        - user service
        - 2BImplemented
      summary: Register new user
      description: Register a new user for an OP token; precondition - user is already authenticated by OP
      parameters:
        - in: body
          name: userData
          description: userData which has to be stored for this user in user server and the OP auth token to identify user
          required: true
          schema:
            $ref: '#/definitions/UserData'
      responses:
        '200':
          description: Successful response; registration successful; returns stored user data
          schema:
            $ref: '#/definitions/UserData'
        '400':
          description: Not successful response; user already exists or an unexpected error occurred
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/userinfo/{token}':
    get:
      tags:
        - auth service
        - user service
        - 2BImplemented
      summary: GET user data
      description: returns stored user data
      parameters:
        - in: path
          name: token
          description: OP auth token to identify user
          required: true
          type: string
      responses:
        '200':
          description: Successful response; returns stored user data
          schema:
            $ref: '#/definitions/UserData'
        '400':
          description: Not successful response; no user exists for that token or an unexpected error occurred
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - auth service
        - user service
        - 2BImplemented
      summary: UPDATE user data
      description: updates user data
      parameters:
        - in: path
          name: token
          description: OP auth token to identify user
          required: true
          type: string
        - in: body
          name: userData
          description: userData the stored userData shall be updated with containing the OP auth token to identify user
          required: true
          schema:
            $ref: '#/definitions/UserData'
      responses:
        '200':
          description: Successful response; returns updated user data
          schema:
            $ref: '#/definitions/UserData'
        '400':
          description: Not successful response; no user exists for that token or an unexpected error occurred
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/logout/{token}':
    get:
      tags:
        - auth service
        - token administration
      summary: logout
      description:
        logout; invalidates the token; user keeps logged in at the OP
      parameters:
        - in: path
          name: token
          description: token to be invalidated
          required: true
          type: string
      responses:
        '200':
          description: Successful response; logout is successful (or the token already expired)
          schema:
            type: string
            enum:
              - OK
        '400':
          description: Not successful response
          schema:
            $ref: '#/definitions/ErrorResponse'

definitions:
  OpenIDConnectProviderInfo:
    type: object
    description: OpenID Connect provider configuration for a given context
    properties:
      context:
        type: string
        description: context of our application, e.g. trackle, trackle-dev, ubirch-admin-ui, for which this OP configuration is specified for
      providerId:
        type: string
        description: ubirch internal OpenID Connect provider ID
      name:
        type: string
        description: display name for the ubirch internal OpenID Connect provider ID
      redirectUrl:
        type: string
        description:
          redirect url to open the login page of the OP; contains all required parameters for the redirection back to our context
    example:
      {
        "context": "trackle-dev",
        "providerId": "google",
        "name": "Google",
        "redirectUrl": "https://accounts.google.com/o/oauth2/v2/auth?response_type=code&client_id=370115332091-kqf5hu698s4sodrvv03ka3bule530rp5.apps.googleusercontent.com&redirect_uri=https%3A%2F%2Flocalhost%3A10000%2Foidc-callback-google&scope=openid&state=62dxXDHVXO4Do1oivEjdbVwXIIjegysg7KoRVBy7_II"
      }
  OPCredentials:
    type: object
    description: Credentials from OP login
    required:
      - context
      - providerId
      - code
      - state
    properties:
      context:
        type: string
        description: context of our application, e.g. trackle, trackle-dev, ubirch-admin-ui
      providerId:
        type: string
        description: ubirch internal OpenID Connect provider ID
      code:
        type: string
        description: the code we obtained from OP, which has to be verified in our backend
      state:
        type: string
        description: the state is used to maintain relation between request and callback; state was sent to the OP as part of the redirectUrl; each state can only be used once and is verified in backend
    example:
      {
        "context": "ubirch-admin-ui-dev",
        "providerId":"google",
        "code":"4/Qem2JN-di08_u5KUcVCR7NQFR3qHmRcqwhkC2JSv3Sw",
        "state":"mTyOeZO6JRZLnrEPV9BYqbEh8Upf_f8JVdjvQpdU11k"
      }
  Token:
    type: object
    description: token to request protected resources in several of ours backend services
    required:
      - token
    properties:
      token:
        type: string
        description: token to request protected resources
    example:
      {"token": "a_token_1234"}
  UserData:
    type: object
    description: user data and OP token to identify user
    required:
      - token
    properties:
      token:
        type: string
        description: OP token to identify user
      nickname:
        type: string
        description: nickname used to call user in the UI
    example:
      {
        "token":"5df0c9b7-564a-4b90-8f1b-998fbe1a1cbf",
        "userNickname":"my Nick"
      }
  StatusResponse:
    type: object
    description: status object with status message
    required:
      - apiVersion
      - status
      - message
    properties:
      apiVersion:
        type: string
      status:
        type: string
        enum:
          - OK
          - NOK
        description: OK or NOK = not OK
      message:
        type: string
        description: status description
    example:
      {
        "version":"1.0",
        "status":"OK",
        "message":"Welcome to the ubirchAuthService"
      }
  ErrorResponse:
    type: object
    description: error object with error code and message
    required:
      - apiVersion
      - status
      - error
    properties:
      apiVersion:
        type: string
        example:
          "1.0.0"
      status:
        type: string
        description: NOK because it's an error
        enum:
          - NOK
      error:
        type: object
        required:
          - errorId
          - errorMessage
        properties:
          errorId:
            type: string
            enum:
              - ErrorTimeOut
              - ErrorNotHandled
              - ErrorFatalIntern
              - ErrorMissingParams
              - ErrorParseJson
              - ErrorUserAlreadyExists
              - ErrorNoUserForToken
          errorMessage:
            type: string
            enum:
              - request could not be processed in time
              - request could not be handled
              - fatal internal error
              - missing parameters
              - cannot parse incoming json doc
              - user already exists
              - no user exists for given token
