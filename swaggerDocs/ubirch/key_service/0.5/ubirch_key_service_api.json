{
  "swagger": "2.0",
  "info": {
    "version": "0.5.0",
    "title": "ubirch key service REST API",
    "description": "This is the definition of the ubirch key service REST API containing the following parts:|\n- key registry where public keys of devices and apps can be stored and requested\n- handshakes between two parties can be performed\n- through direct communication (TODO)\n- without direct communication with handshake objects tranfered through the key service"
  },
  "basePath": "/api/keyService/v0.5",
  "produces": [
    "application/json"
  ],
  "paths": {
    "/pubkey": {
      "post": {
        "tags": [
          "key registry",
          "2BImplemented"
        ],
        "summary": "stores new public key",
        "description": "stores the given public key with its unique pubKeyID",
        "parameters": [
          {
            "in": "body",
            "name": "pubkey",
            "description": "the new public key object with the pubKey that should be stored for the unique pubKeyId - also part of the pub key object - in the key registry to be able to find the public key; pubKeyId may not exist already",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PublicKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; returns the new created pubKeyObject",
            "schema": {
              "$ref": "#/definitions/PublicKey"
            }
          },
          "400": {
            "description": "No successful response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/pubkey/current/hardwareId/{hardwareId}": {
      "get": {
        "tags": [
          "key registry",
          "2BImplemented"
        ],
        "summary": "query only the currenty valid public keys",
        "description": "query the currently valid public keys based on a hardwareId",
        "parameters": [
          {
            "in": "path",
            "name": "hardwareId",
            "type": "string",
            "description": "hardwareId for which the ",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; returns an array of currently valid public keys",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PublicKey"
              }
            }
          },
          "400": {
            "description": "No successful response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/pubkey/{pubkeyid}": {
      "put": {
        "tags": [
          "key registry",
          "2BImplemented"
        ],
        "summary": "updates public key",
        "description": "updates the given public key found by pubKeyID in the key registry with the given data; the public key must exist already",
        "parameters": [
          {
            "name": "pubkeyid",
            "in": "path",
            "description": "unique id of the public key; pubKeyId must exist already in the keyRegistry",
            "required": true,
            "type": "number",
            "format": "integer"
          },
          {
            "in": "body",
            "name": "pubkey",
            "description": "the public key object with the new pubKey data that the existing pubKey should be updated with",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PublicKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; returns the updated pubKeyObject",
            "schema": {
              "$ref": "#/definitions/PublicKey"
            }
          },
          "400": {
            "description": "No successful response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "key registry",
          "2BImplemented"
        ],
        "summary": "get public key",
        "description": "returns the public key for the given pubKeyID from the key registry",
        "parameters": [
          {
            "name": "pubkeyid",
            "in": "path",
            "description": "unique id of the public key to find it in the key registry",
            "required": true,
            "type": "number",
            "format": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; returns the requested pubKeyObject",
            "schema": {
              "$ref": "#/definitions/PublicKey"
            }
          },
          "400": {
            "description": "No successful response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "key registry",
          "2BImplemented"
        ],
        "summary": "delete public key",
        "description": "deletes the public key for the given pubKeyID from the key registry",
        "parameters": [
          {
            "name": "pubkeyid",
            "in": "path",
            "description": "unique id of the public key to find it in the key registry",
            "required": true,
            "type": "number",
            "format": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; returns the pubKeyObject that has been deleted from the keyRegistry",
            "schema": {
              "$ref": "#/definitions/PublicKey"
            }
          },
          "400": {
            "description": "Not successful response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/handshake": {
      "post": {
        "tags": [
          "handshake",
          "2BImplemented"
        ],
        "summary": "new handshake",
        "description": "initiates a new handshake for handshake process without direct communication",
        "parameters": [
          {
            "in": "body",
            "name": "handshake",
            "description": "the necessary data to initiate a handshake that are the pubKeyIds of both handshake parties",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HandshakeObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; returns the new created handshakeObject; the keyRegistry has added the following\n\n- pubKeys of both handshake parties\n- state = init\n- new unique handshake id",
            "schema": {
              "$ref": "#/definitions/HandshakeObject"
            }
          },
          "400": {
            "description": "Not successful response; fails if\n\n- pubKeyId(s) of handshake party is missing\n- if no pubKey can be found for one or both pubKeyIds\n- dataset creation failed\n- the keyRegistry isn't reachable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/handshake/{handshakeid}": {
      "get": {
        "tags": [
          "handshake",
          "2BImplemented"
        ],
        "summary": "returns handshake data",
        "description": "returns the full handshake dataset of the handshake identified by the handshake id",
        "parameters": [
          {
            "in": "path",
            "name": "handshakeid",
            "description": "id of the requested handshake",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; returns the requested handshakeObject",
            "schema": {
              "$ref": "#/definitions/HandshakeObject"
            }
          },
          "400": {
            "description": "Not successful response; fails if\n\n- handshakeid is missing\n- if no handshake can be found for the given handshakeid\n- the keyRegistry isn't reachable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "handshake",
          "2BImplemented"
        ],
        "summary": "updates handshake data",
        "description": "updates the handshake dataset found by handshake id in the key registry with the given data",
        "parameters": [
          {
            "in": "path",
            "name": "handshakeid",
            "description": "id of the handshake that shall be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "handshake",
            "description": "the necessary data to update a handshake",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HandshakeObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; returns the handshakeObject updated with the new data",
            "schema": {
              "$ref": "#/definitions/HandshakeState"
            }
          },
          "400": {
            "description": "Not successful response; fails if\n\n- handshakeid is missing\n- if no handshake can be found for the given handshakeid\n- if the triggered state transition isn't valid\n- the keyRegistry isn't reachable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "handshake",
          "2BImplemented"
        ],
        "summary": "deletes handshake",
        "description": "deletes the handshake dataset identified by the handshake id",
        "parameters": [
          {
            "in": "path",
            "name": "handshakeid",
            "description": "id of the handshake that shall be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; returns the handshakeObject that has been deleted from the keyRegistry",
            "schema": {
              "$ref": "#/definitions/HandshakeState"
            }
          },
          "400": {
            "description": "Not successful response; fails if\n\n- handshakeid is missing\n- if no handshake can be found for the given handshakeid\n- if the triggered state transition isn't valid\n- the keyRegistry isn't reachable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/handshake/open/{pubkeyid}": {
      "get": {
        "tags": [
          "handshake",
          "2BImplemented"
        ],
        "summary": "returns open handshakes",
        "description": "returns a full list of all handshakes in an open state for this pubKeyId as an array;  handshakeObjects are returned",
        "parameters": [
          {
            "in": "path",
            "name": "pubkeyid",
            "description": "id of the pubKey that wants to lookup its open handshakes",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; returns the requested handshakeObjects as an array",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HandshakeObject"
              }
            }
          },
          "400": {
            "description": "Not successful response; fails if\n\n- pubkeyid is missing\n- if no pubKey can be found for the pubkeyid\n- the keyRegistry isn't reachable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/handshake/state/{handshakeid}": {
      "get": {
        "tags": [
          "handshake",
          "2BImplemented"
        ],
        "summary": "returns handshake state",
        "description": "returns the state of the handshake identified by the handshake id",
        "parameters": [
          {
            "in": "path",
            "name": "handshakeid",
            "description": "id of the requested handshake",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; returns the requested handshakeState",
            "schema": {
              "$ref": "#/definitions/HandshakeStateObject"
            }
          },
          "400": {
            "description": "Not successful response; fails if\n\n- handshakeid is missing\n- if no handshake can be found for the given handshakeid\n- the keyRegistry isn't reachable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "handshake",
          "2BImplemented"
        ],
        "summary": "updates handshake state",
        "description": "updates the state of the handshake identified by the handshake id",
        "parameters": [
          {
            "in": "path",
            "name": "handshakeid",
            "description": "id of the handshake that shall be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "handshakestate",
            "description": "the necessary data to update the state of a handshake",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HandshakeStateObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; returns the handshakeStateObject updated with the new state",
            "schema": {
              "$ref": "#/definitions/HandshakeStateObject"
            }
          },
          "400": {
            "description": "Not successful response; fails if\n\n- handshakeid is missing\n- if no handshake can be found for the given handshakeid\n- if the triggered state transition isn't valid\n- the keyRegistry isn't reachable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/handshake/state/open/{pubkeyid}": {
      "get": {
        "tags": [
          "handshake",
          "2BImplemented"
        ],
        "summary": "returns states of all open handshakes",
        "description": "returns a full list of states for all handshakes in an open state for this pubKeyId as an array",
        "parameters": [
          {
            "in": "path",
            "name": "pubkeyid",
            "description": "id of the pubKey that wants to lookup its open handshakes",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; returns the requested handshakeStateObjects as an array",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HandshakeStateObject"
              }
            }
          },
          "400": {
            "description": "Not successful response; fails if\n\n- pubkeyid is missing\n- if no pubKey can be found for the pubkeyid\n- the keyRegistry isn't reachable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "PublicKeyInfo": {
      "description": "the public key itself with all it's information",
      "type": "object",
      "discriminator": "pubkeyInfo",
      "required": [
        "hwDeviceId",
        "pubKey",
        "algorithm",
        "previousPubKey",
        "created",
        "validNotBefore"
      ],
      "properties": {
        "hwDeviceId": {
          "type": "string",
          "description": "some unique hardware id which can be a UUId but doesn't have to"
        },
        "pubKey": {
          "type": "string",
          "description": "Base64 encoded public key"
        },
        "algorithm": {
          "type": "string",
          "description": "algorithm of the public key"
        },
        "previousPubKey": {
          "type": "string",
          "description": "(optional) Base64 encoded predecessor key"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 timestamp - when the key was created"
        },
        "validNotBefore": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 timestamp - key is not valid before this timestamp"
        },
        "validNotAfter": {
          "type": "string",
          "format": "date-time",
          "description": "(optional) ISO 8601 timestamp - key is not valid after this timestamp"
        }
      }
    },
    "PublicKey": {
      "description": "a public key as we accept it in the key-service",
      "type": "object",
      "discriminator": "publicKey",
      "required": [
        "pubkeyInfo",
        "signature"
      ],
      "properties": {
        "pubkeyInfo": {
          "$ref": "#/definitions/PublicKeyInfo"
        },
        "signature": {
          "type": "string",
          "description": "Base 64 encoded signature of the _pubkeyInfo_ (created with key described in _pubkeyInfo_)"
        },
        "previousPubKeySignature": {
          "type": "string",
          "description": "(optional) Base 64 encoded signature of the _pubkeyInfo_ (created with previous key)"
        }
      }
    },
    "SignedPackage": {
      "description": "signature wrapper for any payload",
      "type": "object",
      "discriminator": "signedPackage",
      "properties": {
        "signature": {
          "type": "string",
          "description": "signature of this package signes the payload"
        },
        "pubKey": {
          "type": "string",
          "description": "the pub key to check the signature"
        },
        "version": {
          "type": "string",
          "description": "API version"
        },
        "created": {
          "type": "integer",
          "format": "int64",
          "description": "timestamp of creation date, will be generated on server at creation time"
        }
      }
    },
    "PubKey": {
      "description": "public key object with the pubKey and it's unique pubKeyId",
      "type": "object",
      "properties": {
        "pubKey": {
          "type": "string",
          "description": "the public key"
        },
        "id": {
          "type": "string",
          "description": "the unique id used to find this public key in the key registry"
        },
        "fingerprint": {
          "type": "string",
          "description": "fingerprint checksum for this public key"
        }
      }
    },
    "Handshake": {
      "description": "transfer of data and collected information for a handshake process",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "the unique id of this handshake in the key registry"
        },
        "status": {
          "$ref": "#/definitions/HandshakeState"
        },
        "initiator": {
          "$ref": "#/definitions/HandshakeParty"
        },
        "responder": {
          "$ref": "#/definitions/HandshakeParty"
        }
      }
    },
    "HandshakeState": {
      "type": "string",
      "description": "indicates the state of this handshake process",
      "default": "undefined",
      "enum": [
        "undefined",
        "init",
        "validateInitiator",
        "trustInitiator",
        "initiatorValidationFailed",
        "validateResponder",
        "trustResponder",
        "responderValidationFailed",
        "successful",
        "unsuccessful",
        "finishedSuccessful",
        "finishedUnsuccessful",
        "timeout",
        "aborted",
        "deleted"
      ]
    },
    "HandshakeParty": {
      "type": "object",
      "description": "public key and nonce to check key of this party",
      "required": [
        "pubKeyRef"
      ],
      "properties": {
        "pubKeyRef": {
          "$ref": "#/definitions/PubKey"
        },
        "nonce": {
          "$ref": "#/definitions/Nonce"
        }
      }
    },
    "Nonce": {
      "type": "object",
      "description": "both parties of the handshake ask the other side to decrypt a random value (nonce), it encrypted with the public key of the other side, to check the correctness of this public key",
      "properties": {
        "value": {
          "type": "string",
          "description": "test phrase (nonce), encrypted with pubKey or decrypted as plaintext"
        },
        "encrypted": {
          "type": "boolean",
          "description": "if true then the value of this nonce is encrypted, if false then it's decrypted and in plain text"
        }
      }
    },
    "PubKeyObject": {
      "description": "public key object with the pubKey and it's unique pubKeyId",
      "allOf": [
        {
          "$ref": "#/definitions/SignedPackage"
        },
        {
          "type": "object",
          "required": [
            "payload"
          ],
          "properties": {
            "payload": {
              "type": "object",
              "required": [
                "pubKeyRef"
              ],
              "properties": {
                "pubKeyRef": {
                  "$ref": "#/definitions/PubKey"
                }
              }
            }
          }
        }
      ]
    },
    "HandshakeObject": {
      "type": "object",
      "description": "handshake object transfers content required to perform a handshake between two parties",
      "allOf": [
        {
          "$ref": "#/definitions/SignedPackage"
        },
        {
          "type": "object",
          "required": [
            "payload"
          ],
          "properties": {
            "payload": {
              "type": "object",
              "required": [
                "handshake"
              ],
              "properties": {
                "handshake": {
                  "$ref": "#/definitions/Handshake"
                }
              }
            }
          }
        }
      ]
    },
    "HandshakeStateObject": {
      "type": "object",
      "description": "transfers the state of a handshake",
      "allOf": [
        {
          "$ref": "#/definitions/SignedPackage"
        },
        {
          "type": "object",
          "required": [
            "payload"
          ],
          "properties": {
            "payload": {
              "type": "object",
              "required": [
                "id",
                "status"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "the unique id of this handshake in the key registry"
                },
                "status": {
                  "$ref": "#/definitions/HandshakeState"
                }
              }
            }
          }
        }
      ]
    },
    "ErrorResponse": {
      "type": "object",
      "description": "error object with error code and message",
      "required": [
        "apiVersion",
        "status",
        "error"
      ],
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "KO because it's an error"
        },
        "error": {
          "type": "object",
          "required": [
            "errorId",
            "errorMessage"
          ],
          "properties": {
            "errorId": {
              "type": "string",
              "enum": [
                "ErrorTimeOut",
                "ErrorNotHandled",
                "ErrorFatalIntern",
                "ErrorMissingParams",
                "ErrorPubKeyIdExists",
                "ErrorInvalidPubKeyId",
                "ErrorUpdatePubKey",
                "ErrorParseJson",
                "ErrorCannotDeletePubKey",
                "ErrorHandshakeCannotFindDestination",
                "ErrorHandshakeFailedTimeout",
                "ErrorHandshakeFailedWrongResult",
                "ErrorInvalidSignature",
                "ErrorInvalidHandshakeId",
                "ErrorHandshakeInterrupted",
                "ErrorNoHandshakeState"
              ]
            },
            "errorMessage": {
              "type": "string",
              "enum": [
                "request could not be processed in time",
                "request could not be handled",
                "fatal internal error",
                "missing parameters",
                "given pubKeyId for new public key already exists",
                "cannot find public key for given pubKeyId",
                "public key for given pubKeyId cannot be updated",
                "cannot parse incoming json doc",
                "cannot delete PubKey from datatbase",
                "cannot find destination given by pubKeyId",
                "handshake failed because the destination didn't responde in time",
                "Decrypted result value of handshake process isn't equal with encrypted random value",
                "Verification of signature failed",
                "Cannot find handshake data of given handshakeId",
                "Handshake process has been interrupted by the other part",
                "Cannot read handshake state of given handshakeId"
              ]
            }
          }
        }
      }
    }
  }
}