{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "ubirch key service REST API",
    "description": "This is the definition of the ubirch key service REST API containing the following parts:|\n- key registry where public keys of devices and apps can be stored and requested\n- handshakes between two parties can be performed\n- through direct communication (TODO)\n- without direct communication with handshake objects tranfered through the key service"
  },
  "schemes": [
    "https"
  ],
  "host": "key.dev.ubirch.com",
  "basePath": "/api/keyService/v1",
  "produces": [
    "application/json"
  ],
  "paths": {"/": {
    "get": {
      "tags": [
        "key-service",
        "health",
        "welcome"
      ],
      "summary": "Welcome / Health",
      "description": "Check if service is up and running",
      "responses": {
        "200": {
          "description": "Successful response; returns status object with welcome message",
          "schema": {
            "$ref": "#/definitions/HealthResponse200"
          }
        },
        "400": {
          "description": "Not successful response",
          "schema": {
            "$ref": "#/definitions/HealthResponse400"
          }
        }
      }
    }
  },
    "/check": {
      "get": {
        "tags": [
          "key-service",
          "health",
          "welcome"
        ],
        "summary": "Welcome / Health",
        "description": "Check if service is up and running",
        "responses": {
          "200": {
            "description": "Successful response; returns status object with welcome message",
            "schema": {
              "$ref": "#/definitions/HealthResponse200"
            }
          },
          "400": {
            "description": "Not successful response",
            "schema": {
              "$ref": "#/definitions/HealthResponse400"
            }
          }
        }
      }
    },
    "/deepCheck": {
      "get": {
        "tags": [
          "key-service",
          "health"
        ],
        "summary": "health monitor deep check",
        "description": "allows a deep check of the service",
        "responses": {
          "200": {
            "description": "everything is fine",
            "schema": {
              "$ref": "#/definitions/DeepCheckHealthResponse200"
            }
          },
          "500": {
            "description": "something is not fine",
            "schema": {
              "$ref": "#/definitions/DeepCheckHealthResponse500"
            }
          }
        }
      }
    },
    "/pubkey": {
      "post": {
        "tags": [
          "key-service",
          "key registry"
        ],
        "summary": "stores new public key",
        "description": "stores the given public key with its unique pubKeyID",
        "parameters": [
          {
            "in": "body",
            "name": "pubkey",
            "description": "the new public key object with the pubKey that should be stored for the unique pubKeyId - also part of the pub key object - in the key registry to be able to find the public key; pubKeyId may not exist already",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PublicKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; returns created public key",
            "schema": {
              "$ref": "#/definitions/PublicKey"
            }
          },
          "400": {
            "description": "No successful response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "key-service",
          "key registry"
        ],
        "summary": "delete a public key",
        "parameters": [
          {
            "in": "body",
            "name": "publicKeyToDelete",
            "description": "the public key to delete including signature of publicKey field",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeletePublicKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "delete was successful or key did not exist"
          },
          "400": {
            "description": "signature was invalid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/pubkey/trust": {
      "post": {
        "tags": [
          "key-service",
          "key registry"
        ],
        "summary": "trust another key",
        "parameters": [
          {
            "in": "body",
            "name": "trustedKey",
            "description": "key A expressing trust in key B",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignedTrustRelation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "trust has successfully been expressed"
          },
          "400": {
            "description": "expressing trust failed",
            "schema": {
              "$ref": "#/definitions/TrustError"
            }
          },
          "500": {
            "description": "server has a problem",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/pubkey/mpack": {
      "post": {
        "tags": [
          "key-service",
          "key registry",
          "MessagePack"
        ],
        "summary": "stores new public key in msgpack format",
        "description": "stores the given public key with its unique pubKeyID",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "pubkey",
            "description": "a mgspack representation of the public key registration. The format follows both the json structure (with binary values instead of encoded) as well as the [ubirch-protocol](https://github.com/ubirch/ubirch-protocol#key-registration) format.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PublicKeyMpack"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; returns created public key",
            "schema": {
              "$ref": "#/definitions/PublicKey"
            }
          },
          "400": {
            "description": "No successful response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/pubkey/current/hardwareId/{hardwareId}": {
      "get": {
        "tags": [
          "key-service",
          "key registry"
        ],
        "summary": "query only the currently valid public keys",
        "description": "query the currently valid public keys based on a hardwareId",
        "parameters": [
          {
            "in": "path",
            "name": "hardwareId",
            "type": "string",
            "description": "hardwareId for which to search for currently valid public keys",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; returns an array of currently valid public keys",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PublicKey"
              }
            }
          },
          "400": {
            "description": "No successful response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/pubkey/{pubkeyid}": {
      "put": {
        "tags": [
          "key-service",
          "key registry",
          "2BImplemented"
        ],
        "summary": "updates public key",
        "description": "updates the given public key found by pubKeyID in the key registry with the given data; the public key must exist already",
        "parameters": [
          {
            "name": "pubkeyid",
            "in": "path",
            "description": "unique id of the public key; pubKeyId must exist already in the keyRegistry",
            "required": true,
            "type": "number",
            "format": "integer"
          },
          {
            "in": "body",
            "name": "pubkey",
            "description": "the public key object with the new pubKey data that the existing pubKey should be updated with",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PublicKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; returns the updated public key",
            "schema": {
              "$ref": "#/definitions/PublicKey"
            }
          },
          "400": {
            "description": "No successful response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "key-service",
          "key registry",
          "2BImplemented"
        ],
        "summary": "get public key",
        "description": "returns the public key for the given pubKeyID from the key registry",
        "parameters": [
          {
            "name": "pubkeyid",
            "in": "path",
            "description": "unique id of the public key to find it in the key registry",
            "required": true,
            "type": "number",
            "format": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response; returns the requested public key",
            "schema": {
              "$ref": "#/definitions/PublicKey"
            }
          },
          "400": {
            "description": "No successful response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/pubkey/revoke": {
      "post": {
        "tags": [
          "key-service",
          "key registry",
          "2Bimplemented"
        ],
        "summary": "revoke a key",
        "parameters": [
          {
            "in": "body",
            "name": "signedRevoke",
            "description": "signed revokation request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignedRevoke"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "key has been successfully revoked",
            "schema": {
              "$ref": "#/definitions/PublicKey"
            }
          },
          "400": {
            "description": "revokation failed",
            "schema": {
              "$ref": "#/definitions/RevokeError"
            }
          },
          "500": {
            "description": "server has a problem",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/pubkey/trusted": {
      "get": {
        "tags": [
          "key-service",
          "key registry"
        ],
        "summary": "query all trusted keys",
        "description": "This method allows us to query all keys we trust.\nTo ensure the underlying web-of-trust's privacy we only allow queries on keys which the caller has full control over which is ensured by a mandatory request signature. In addition we only allow requests with a recent enough _queryDate_ (up to a few minutes old).\n\nThe request includes a `depth` field which we'll ignore for now. We'll start to use it only once full control over whom can see which trust relations has been implemented.",
        "parameters": [
          {
            "in": "body",
            "name": "signedGetTrusted",
            "description": "signed request for trusted keys",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FindTrustedSigned"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "all trusted keys",
            "schema": {
              "$ref": "#/definitions/TrustedKeysResultSet"
            }
          },
          "400": {
            "description": "request for trusted keys failed",
            "schema": {
              "$ref": "#/definitions/FindTrustedError"
            }
          },
          "500": {
            "description": "server has a problem",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "key-service",
          "key registry"
        ],
        "summary": "query all trusted keys",
        "description": "NOTE: This method does exactly the same as it's _GET_ equivalent and is meant for clients unable to send a body with a _GET_ request.",
        "parameters": [
          {
            "in": "body",
            "name": "signedGetTrusted",
            "description": "signed request for trusted keys",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FindTrustedSigned"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "all trusted keys",
            "schema": {
              "$ref": "#/definitions/TrustedKeysResultSet"
            }
          },
          "400": {
            "description": "request for trusted keys failed",
            "schema": {
              "$ref": "#/definitions/FindTrustedError"
            }
          },
          "500": {
            "description": "server has a problem",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "HealthResponse200": {
      "description": "response if server is healthy",
      "type": "object",
      "required": [
        "version",
        "status",
        "message"
      ],
      "properties": {
        "version": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "OK",
            "NOK"
          ]
        },
        "message": {
          "type": "string"
        }
      },
      "example": {
        "version": "1.0",
        "status": "OK",
        "message": "Welcome to the ubirchUserService"
      }
    },
    "HealthResponse400": {
      "allOf": [
        {
          "$ref": "#/definitions/HealthResponse200"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "message": "this is some error message"
      }
    },
    "DeepCheckHealthResponse200": {
      "description": "response of deep check if server is healthy",
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            true,
            false
          ]
        },
        "message": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "array with all errors that occurred"
        }
      },
      "example": {
        "status": true,
        "message": []
      }
    },
    "DeepCheckHealthResponse500": {
      "allOf": [
        {
          "$ref": "#/definitions/DeepCheckHealthResponse200"
        }
      ],
      "example": {
        "status": false,
        "message": [
          "unable to connect to the database"
        ]
      }
    },
    "ErrorResponse": {
      "type": "object",
      "description": "error object with error code and message",
      "required": [
        "version",
        "status",
        "errorType",
        "errorMessage"
      ],
      "properties": {
        "version": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "KO because it's an error"
        },
        "errorType": {
          "type": "string",
          "enum": [
            "ServerError",
            "ErrorTimeOut",
            "ErrorNotHandled",
            "ErrorFatalIntern",
            "ErrorMissingParams",
            "ErrorPubKeyIdExists",
            "ErrorInvalidPubKeyId",
            "ErrorUpdatePubKey",
            "ErrorParseJson",
            "ErrorCannotDeletePubKey",
            "ErrorInvalidSignature",
            "TrustError",
            "RevokeError",
            "FindTrustedError"
          ]
        },
        "errorMessage": {
          "type": "string",
          "enum": [
            "request could not be processed in time",
            "request could not be handled",
            "fatal internal error",
            "missing parameters",
            "given pubKeyId for new public key already exists",
            "cannot find public key for given pubKeyId",
            "public key for given pubKeyId cannot be updated",
            "cannot parse incoming json doc",
            "cannot delete PubKey from datatbase",
            "cannot find destination given by pubKeyId",
            "Verification of signature failed"
          ]
        }
      }
    },
    "ServerError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorResponse"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "errorType": "ServerError",
        "message": "server has a problem"
      }
    },
    "PublicKeyInfo": {
      "description": "the public key itself with all it's information",
      "type": "object",
      "discriminator": "pubkeyInfo",
      "required": [
        "hwDeviceId",
        "pubKey",
        "algorithm",
        "created",
        "validNotBefore"
      ],
      "properties": {
        "hwDeviceId": {
          "type": "string",
          "description": "some unique hardware id which can be a UUId but doesn't have to"
        },
        "pubKey": {
          "type": "string",
          "description": "Base64 encoded public key"
        },
        "pubKeyId": {
          "type": "string",
          "description": "(optional) typically the hash of _pubKey_ (depending on _algorithm_) but can also be the _pubKey_"
        },
        "algorithm": {
          "type": "string",
          "description": "algorithm of the public key",
          "enum": [
            "RSA4096",
            "ECC_ED25519"
          ]
        },
        "previousPubKeyId": {
          "type": "string",
          "description": "(optional) Base64 encoded predecessor key"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 timestamp - when the key was created"
        },
        "validNotBefore": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 timestamp - key is not valid before this timestamp"
        },
        "validNotAfter": {
          "type": "string",
          "format": "date-time",
          "description": "(optional) ISO 8601 timestamp - key is not valid after this timestamp"
        }
      }
    },
    "PublicKey": {
      "description": "a public key as we accept it in the key-service",
      "type": "object",
      "discriminator": "publicKey",
      "required": [
        "pubKeyInfo",
        "signature"
      ],
      "properties": {
        "pubKeyInfo": {
          "$ref": "#/definitions/PublicKeyInfo"
        },
        "signature": {
          "type": "string",
          "description": "Base 64 encoded signature of the _pubkeyInfo_ (created with key described in _pubkeyInfo_)"
        },
        "previousPubKeySignature": {
          "type": "string",
          "description": "(optional) Base 64 encoded signature of the _pubkeyInfo_ (created with previous key)"
        },
        "signedRevoke": {
          "$ref": "#/definitions/SignedRevoke"
        }
      },
      "example": {
        "pubKeyInfo": {
          "hwDeviceId": "4150473037-547268290-3238389072-173590267",
          "pubKey": "MC0wCAYDK2VkCgEBAyEAovEmQJuiWdrb5hV/mhG1SF9Vul7tRveYZ74Mk+Okjhg=",
          "algorithm": "ECC_ED25519",
          "created": "2017-08-03T09:51:36.000Z",
          "validNotBefore": "2017-08-03T09:51:36.000Z",
          "validNotAfter": "2018-02-03T09:51:36.000Z"
        },
        "signature": "MfIJEmhbIQBwHK4URdqialGOyeg1ZKyIAGPmy5VZ8Cfim4hnu3c4SAzHdhHuu4UY0XP3BWgPRVXmf8/mv8s3Dw=="
      }
    },
    "PublicKeyMpack": {
      "description": "public key registration package in msgpack (decode example into binary before posting!)",
      "format": "binary",
      "example": "95cd0012b000000000000000000000000039b29abc0186a9616c676f726974686dab4543435f45443235353139a7637265617465640eaa68774465766963654964b000000000000000000000000039b29abca67075624b6579da002055bdecad41f5f90f72d464c034eb0e2b0eeb42ca5d647d419c81d6932e8ae7c0ad76616c69644e6f744166746572ce01e1338dae76616c69644e6f744265666f72650eda00408f4f542e4996eccb66c8123b5c6ff89362f557711c8fef7e2c5aeb70d1d850a57298829a586f97841b4a72b2d0819450600d9b4e0b24a367d2fe730675951c02"
    },
    "DeletePublicKey": {
      "description": "a public key to delete",
      "type": "object",
      "required": [
        "publicKey",
        "signature"
      ],
      "properties": {
        "publicKey": {
          "type": "string",
          "description": "Base 64 encoded public key as used in _PublicKeyInfo_ (see endpoint: PUT /pubKey)"
        },
        "signature": {
          "type": "string",
          "description": "Base64 encoded signature of input field _publicKey_"
        }
      },
      "example": {
        "publicKey": "MC0wCAYDK2VkCgEBAyEAxUQcVYd3dt7jAJBtulZoz8QDftnND2X5//ittJ7XAhs=",
        "signature": "/kED2IJKCAyro/szRoylAwaEx3E8U2OFI8zHNB8cEHdxy8JtgoR81YL1X/o7Xzkz30eqNjIsWfhmQNdaIma2Aw=="
      }
    },
    "SignedTrustRelation": {
      "description": "Expressed trust from one key to another and confirmed with a signature by the key-pair expressing trust.",
      "type": "object",
      "required": [
        "trustRelation",
        "signature"
      ],
      "properties": {
        "trustRelation": {
          "$ref": "#/definitions/TrustRelation"
        },
        "signature": {
          "description": "signature of field `trustRelation` as created with the signing party's private key",
          "type": "string"
        }
      },
      "example": {
        "trustRelation": {
          "created": "2018-09-10T12:37:56.544Z",
          "sourcePublicKey": "MC0wCAYDK2VkCgEBAyEA+alWF5nfiw7RYbRqH5lAcFLjc13zv63FpG7G2OF33O4=",
          "targetPublicKey": "MC0wCAYDK2VkCgEBAyEAV4aTMZNuV2bLEy/VwZQTpxbPEVZ127gs88TChgjuq4s=",
          "trustLevel":10,
          "validNotAfter":"2018-12-10T12:37:56.544Z"
        },
        "signature": "yWMI1pe6Hi7Wf4UxUb1NOUHNBLu/ZyjpDVIqG6mK6mveKoqbU5K1z7cizthAUVVg8HLWRR3uIYLUV/Rx+06ADw=="
      }
    },
    "TrustRelation": {
      "description": "describes a trust relationship between two keys A and B where A expresses it's trust of B.",
      "type": "object",
      "required": [
        "created",
        "sourcePublicKey",
        "targetPublicKey",
        "trustLevel"
      ],
      "properties": {
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "date-time when key A expressed trust in key B"
        },
        "sourcePublicKey": {
          "type": "string",
          "description": "the full public key expressing trust"
        },
        "targetPublicKey": {
          "type": "string",
          "description": "the full public trust is being expressed into"
        },
        "trustLevel": {
          "type": "integer",
          "description": "defines how strong the trust in a key is on a scale from 1-100 (higher values mean more trust; should default to 50)"
        },
        "validNotAfter": {
          "type": "string",
          "format": "date-time",
          "description": "(optional) trust can be expressed for a limited time"
        }
      },
      "example": {
        "created": "2018-09-10T12:37:56.544Z",
        "sourcePublicKey": "MC0wCAYDK2VkCgEBAyEA+alWF5nfiw7RYbRqH5lAcFLjc13zv63FpG7G2OF33O4=",
        "targetPublicKey": "MC0wCAYDK2VkCgEBAyEAV4aTMZNuV2bLEy/VwZQTpxbPEVZ127gs88TChgjuq4s=",
        "trustLevel":10,
        "validNotAfter":"2018-12-10T12:37:56.544Z"
      }
    },
    "TrustError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorResponse"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "errorType": "TrustError",
        "message": "failed to trust another key"
      }
    },
    "Revokation": {
      "description": "describes a key revokation",
      "type": "object",
      "required": [
        "revokationDate",
        "publicKey"
      ],
      "properties": {
        "publicKey": {
          "type": "string",
          "description": "the full public key to revoke"
        },
        "revokationDate": {
          "type": "string",
          "format": "date-time",
          "description": "date-time when a key revokation request has been created"
        }
      },
      "example": {
        "publicKey": "MC0wCAYDK2VkCgEBAyEA+alWF5nfiw7RYbRqH5lAcFLjc13zv63FpG7G2OF33O4=",
        "revokationDate": "2018-09-10T12:10:29.188Z"
      }
    },
    "SignedRevoke": {
      "description": "To revoke a key ownership must be proved by producing a valid signature.",
      "type": "object",
      "required": [
        "revokation",
        "signature"
      ],
      "properties": {
        "revokation": {
          "$ref": "#/definitions/Revokation"
        },
        "signature": {
          "description": "signature of field `revoke` as created with the signing party's private key",
          "type": "string"
        }
      },
      "example": {
        "revokation": {
          "publicKey": "MC0wCAYDK2VkCgEBAyEA+alWF5nfiw7RYbRqH5lAcFLjc13zv63FpG7G2OF33O4=",
          "revokationDate": "2018-09-10T12:10:29.188Z"
        },
        "signature": "4Nlml972DyFdCrVwzrDYnkuY2vcBOHe4txpI4rpTBILeKvtyOnHSi8M1Q00dTdF6VKcyTeWOrsZ0aQeEqY+wDQ=="
      }
    },
    "RevokeError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorResponse"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "errorType": "RevokeError",
        "message": "failed to revoke key"
      }
    },
    "FindTrusted": {
      "description": "Information about querying trusted keys starting with the one specified in this object.",
      "type": "object",
      "required": [
        "depth",
        "minTrustLevel",
        "sourcePublicKey",
        "queryDate"
      ],
      "properties": {
        "depth": {
          "type": "integer",
          "description": "IGNORED FOR NOW (defaults to 1)! Only once the server implements full user control over to whom trust relations are visible we start to use it."
        },
        "minTrustLevel": {
          "type": "integer",
          "description": "the minimum level of trust a key has."
        },
        "sourcePublicKey": {
          "type": "string",
          "description": "the full public key at which to start query of trusted keys"
        },
        "queryDate": {
          "type": "string",
          "format": "date-time",
          "description": "date-time when a trusted keys request has been created; used as simple protection against replay attacks since we only accepts with requests where the _queryDate_ is recent"
        }
      },
      "example": {
        "depth": 1,
        "minTrustLevel": 50,
        "sourcePublicKey": "MC0wCAYDK2VkCgEBAyEA+alWF5nfiw7RYbRqH5lAcFLjc13zv63FpG7G2OF33O4=",
        "queryDate": "2018-09-14T12:03:16.214Z"
      }
    },
    "FindTrustedSigned": {
      "description": "To revoke a key ownership must be proved by producing a valid signature.",
      "type": "object",
      "required": [
        "findTrusted",
        "signature"
      ],
      "properties": {
        "trustedKeys": {
          "$ref": "#/definitions/FindTrusted"
        },
        "signature": {
          "description": "signature of field `getTrustedKeys` as created with the signing party's private key",
          "type": "string"
        }
      },
      "example": {
        "findTrusted": {
          "depth": 1,
          "minTrustLevel": 50,
          "sourcePublicKey": "MC0wCAYDK2VkCgEBAyEA+alWF5nfiw7RYbRqH5lAcFLjc13zv63FpG7G2OF33O4=",
          "queryDate": "2018-09-14T12:03:16.214Z"
        },
        "signature": "LPcI15cz4K+0nEqyB9AUNPYtkP59NpBuf6BDkwh5zzEp8ra7X2Qsv+++3okocMpa0GOcvcYgdZ5pA6Htwt5bBA=="
      }
    },
    "TrustedKeyResult": {
      "description": "One element of the response to a `GET /pubkey/getTrusted` call.",
      "type": "object",
      "required": [
        "depth",
        "trustLevel",
        "publicKey"
      ],
      "properties": {
        "depth": {
          "type": "integer",
          "description": "At what depth a key was found in our web-of-trust."
        },
        "trustLevel": {
          "type": "integer",
          "description": "The level of trust a key has."
        },
        "publicKey": {
          "$ref": "#/definitions/PublicKey"
        }
      },
      "example": {
        "depth": 1,
        "trustLevel": 50,
        "publicKey": {
          "pubKeyInfo": {
            "algorithm": "ECC_ED25519",
            "created": "2018-09-07T13:36:26.703Z",
            "hwDeviceId": "db5f2882-0b08-49f8-85b1-cf709ec9af9f",
            "pubKey": "MC0wCAYDK2VkCgEBAyEA+alWF5nfiw7RYbRqH5lAcFLjc13zv63FpG7G2OF33O4=",
            "pubKeyId": "MC0wCAYDK2VkCgEBAyEA+alWF5nfiw7RYbRqH5lAcFLjc13zv63FpG7G2OF33O4=",
            "validNotBefore": "2018-09-07T14:35:26.795Z"
          },
          "signature": "kDG1tut0GWe+gjXmy0aIfTeUxXLtKFjY0t06ua5V+2BsP7lPjQCbVKMecsBryuqdx5Sko1u1e3B7h2FjlW7cDw=="
        }
      }
    },
    "TrustedKeysResultSet": {
      "description": "Response to a `/pubkey/getTrusted` call. Empty if no keys are trusted.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/TrustedKeyResult"
      },
      "example": [
        {
          "depth": 1,
          "trustLevel": 50,
          "publicKey": {
            "pubKeyInfo": {
              "algorithm": "ECC_ED25519",
              "created": "2018-09-07T13:36:26.703Z",
              "hwDeviceId": "db5f2882-0b08-49f8-85b1-cf709ec9af9f",
              "pubKey": "MC0wCAYDK2VkCgEBAyEA+alWF5nfiw7RYbRqH5lAcFLjc13zv63FpG7G2OF33O4=",
              "pubKeyId": "MC0wCAYDK2VkCgEBAyEA+alWF5nfiw7RYbRqH5lAcFLjc13zv63FpG7G2OF33O4=",
              "validNotBefore": "2018-09-07T14:35:26.795Z"
            },
            "signature": "kDG1tut0GWe+gjXmy0aIfTeUxXLtKFjY0t06ua5V+2BsP7lPjQCbVKMecsBryuqdx5Sko1u1e3B7h2FjlW7cDw=="
          }
        }
      ]
    },
    "FindTrustedError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorResponse"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "errorType": "FindTrustedError",
        "message": "failed to query trusted keys"
      }
    }
  }
}