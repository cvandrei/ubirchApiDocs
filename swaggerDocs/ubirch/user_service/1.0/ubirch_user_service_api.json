{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "ubirch user service REST API",
    "description": "This is the definition of the ubirch user service REST API containing the following parts:|\n- RAW data interface for syncronizing devices with their avatars\n- devices CRUD endpoints"
  },
  "schemes": [
    "https"
  ],
  "host": "auth.dev.ubirch.com",
  "basePath": "/api/userService/v1",
  "produces": [
    "application/json"
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "user-service",
          "health",
          "welcome"
        ],
        "summary": "health monitor",
        "description": "allows a quick check if the service is still up.",
        "responses": {
          "200": {
            "description": "everything is fine",
            "schema": {
              "$ref": "#/definitions/HealthResponse200"
            }
          },
          "400": {
            "description": "something is not fine",
            "schema": {
              "$ref": "#/definitions/HealthResponse400"
            }
          }
        }
      }
    },
    "/check": {
      "get": {
        "tags": [
          "user-service",
          "health",
          "welcome"
        ],
        "summary": "Welcome / Health",
        "description": "Check if service is up and running",
        "responses": {
          "200": {
            "description": "Successful response; returns status object with welcome message",
            "schema": {
              "$ref": "#/definitions/HealthResponse200"
            }
          },
          "400": {
            "description": "Not successful response",
            "schema": {
              "$ref": "#/definitions/HealthResponse400"
            }
          }
        }
      }
    },
    "/deepCheck": {
      "get": {
        "tags": [
          "user-service",
          "health"
        ],
        "summary": "health monitor deep check",
        "description": "allows a deep check of the service",
        "responses": {
          "200": {
            "description": "everything is fine",
            "schema": {
              "$ref": "#/definitions/DeepCheckHealthResponse200"
            }
          },
          "500": {
            "description": "something is not fine",
            "schema": {
              "$ref": "#/definitions/DeepCheckHealthResponse500"
            }
          }
        }
      }
    },
    "/context": {
      "post": {
        "tags": [
          "user-service",
          "context"
        ],
        "summary": "create a context",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "new context",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContextCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "context creation was successful",
            "schema": {
              "$ref": "#/definitions/Context"
            }
          },
          "400": {
            "description": "context creation failed",
            "schema": {
              "$ref": "#/definitions/ContextCreateError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "user-service",
          "context"
        ],
        "summary": "update a context",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "updated context",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Context"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "context update was successful",
            "schema": {
              "$ref": "#/definitions/Context"
            }
          },
          "400": {
            "description": "context update failed",
            "schema": {
              "$ref": "#/definitions/ContextUpdateError"
            }
          }
        }
      }
    },
    "/context/{id}": {
      "get": {
        "tags": [
          "user-service",
          "context"
        ],
        "summary": "get context",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "context's UUID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully loaded context",
            "schema": {
              "$ref": "#/definitions/Context"
            }
          },
          "400": {
            "description": "failed to load context",
            "schema": {
              "$ref": "#/definitions/ContextQueryError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user-service",
          "context"
        ],
        "summary": "delete context",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "context's UUID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully deleted context",
            "schema": {
              "$ref": "#/definitions/Context"
            }
          },
          "400": {
            "description": "failed to delete context",
            "schema": {
              "$ref": "#/definitions/ContextDeleteError"
            }
          }
        }
      }
    },
    "/context/byName/{name}": {
      "get": {
        "tags": [
          "user-service",
          "context"
        ],
        "summary": "get context",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "context's name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully loaded context",
            "schema": {
              "$ref": "#/definitions/Context"
            }
          },
          "400": {
            "description": "failed to load context",
            "schema": {
              "$ref": "#/definitions/ContextQueryError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user-service",
          "context"
        ],
        "summary": "delete context",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "context's name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully deleted context",
            "schema": {
              "$ref": "#/definitions/Context"
            }
          },
          "400": {
            "description": "failed to delete context",
            "schema": {
              "$ref": "#/definitions/ContextDeleteError"
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "tags": [
          "user-service",
          "user",
          "register"
        ],
        "summary": "user registration",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user registration object",
            "description": "user to register",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user registration successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "failed to register user",
            "schema": {
              "$ref": "#/definitions/RegistrationError"
            }
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user-service",
          "user"
        ],
        "summary": "create user",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user object",
            "description": "user to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "failed to create user",
            "schema": {
              "$ref": "#/definitions/UserCreateError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "user-service",
          "user"
        ],
        "summary": "update user",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user object",
            "description": "user to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "failed to update user",
            "schema": {
              "$ref": "#/definitions/UserUpdateError"
            }
          }
        }
      }
    },
    "/user/{provider_id}/{external_user_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "provider_id",
          "description": "providerId a user is with",
          "required": true,
          "type": "string"
        },
        {
          "in": "path",
          "name": "external_user_id",
          "description": "userId with the OpenID Connect providerId",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "user-service",
          "user"
        ],
        "summary": "find user based on providerId and externalUserId",
        "responses": {
          "200": {
            "description": "successfully found user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "failed to load user",
            "schema": {
              "$ref": "#/definitions/UserQueryError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user-service",
          "user"
        ],
        "summary": "delete user based on providerId and externalUserId",
        "responses": {
          "200": {
            "description": "successfully deleted user"
          },
          "400": {
            "description": "failed to delete user",
            "schema": {
              "$ref": "#/definitions/UserDeleteError"
            }
          }
        }
      }
    },
    "/user/emailExists/{email_address}": {
      "parameters": [
        {
          "in": "path",
          "name": "email_address",
          "description": "email address to search with",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "user-service",
          "user"
        ],
        "summary": "find user based on an email address",
        "responses": {
          "200": {
            "description": "user exists"
          },
          "400": {
            "description": "user not found",
            "schema": {
              "$ref": "#/definitions/EmailAddressQueryError"
            }
          }
        }
      }
    },
    "/user/info/{context}/{provider_id}/{external_user_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "context",
          "description": "context name to search with",
          "required": true,
          "type": "string"
        },
        {
          "in": "path",
          "name": "provider_id",
          "description": "providerId to search with",
          "required": true,
          "type": "string"
        },
        {
          "in": "path",
          "name": "external_user_id",
          "description": "externalUserId to search with",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "user-service",
          "user",
          "user info"
        ],
        "summary": "find user infos based on a context, providerId and externalUserId",
        "responses": {
          "200": {
            "description": "user exists",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          },
          "400": {
            "description": "user not found",
            "schema": {
              "$ref": "#/definitions/UserInfoGetError"
            }
          }
        }
      }
    },
    "/user/info": {
      "put": {
        "tags": [
          "user-service",
          "user",
          "user info"
        ],
        "summary": "update user info",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user info object",
            "description": "user info to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInfoUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully update user info",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          },
          "400": {
            "description": "failed to update user",
            "schema": {
              "$ref": "#/definitions/UserInfoUpdateError"
            }
          }
        }
      }
    },
    "/group": {
      "post": {
        "tags": [
          "user-service",
          "group"
        ],
        "summary": "create group",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "group object",
            "description": "group to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created group",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "failed to create group",
            "schema": {
              "$ref": "#/definitions/GroupCreateError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "user-service",
          "group"
        ],
        "summary": "update group",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "group object",
            "description": "group to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully updated group",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "failed to update group",
            "schema": {
              "$ref": "#/definitions/GroupUpdateError"
            }
          }
        }
      }
    },
    "/group/{group_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "group_id",
          "description": "a group's UUID",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "user-service",
          "group"
        ],
        "summary": "load group",
        "responses": {
          "200": {
            "description": "successfully loaded group",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "failed to load group",
            "schema": {
              "$ref": "#/definitions/GroupQueryError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user-service",
          "group"
        ],
        "summary": "delete group",
        "responses": {
          "200": {
            "description": "successfully deleted group"
          },
          "400": {
            "description": "failed to update group",
            "schema": {
              "$ref": "#/definitions/GroupDeleteError"
            }
          }
        }
      }
    },
    "/group/allowedUsers": {
      "parameters": [
        {
          "in": "body",
          "name": "allowed user object",
          "description": "allowed users to add",
          "required": true,
          "schema": {
            "$ref": "#/definitions/AllowedUsers"
          }
        }
      ],
      "get": {
        "tags": [
          "2BImplemented",
          "user-service",
          "group"
        ],
        "summary": "add users to a group as allowed (allows them to access data of devices assigned to this group)",
        "responses": {
          "200": {
            "description": "successfully added users as allowed"
          },
          "400": {
            "description": "failed to add users as allowed",
            "schema": {
              "$ref": "#/definitions/GroupAddAllowedError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "2BImplemented",
          "user-service",
          "group"
        ],
        "summary": "delete group",
        "responses": {
          "200": {
            "description": "successfully deleted group"
          },
          "400": {
            "description": "failed to update group",
            "schema": {
              "$ref": "#/definitions/GroupDeleteAllowedError"
            }
          }
        }
      }
    },
    "/group/memberOf/{context_name}/{provider_id}/{external_user_id}": {
      "get": {
        "tags": [
          "user-service",
          "group"
        ],
        "summary": "load all groups a user owns or is a member of",
        "parameters": [
          {
            "in": "path",
            "name": "context_name",
            "description": "context name as defined in database",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "provider_id",
            "description": "internal providerId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "external_user_id",
            "description": "userId as with the OpenID Connect provider",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "empty if no groups are found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Group"
              }
            }
          }
        }
      }
    },
    "/initData/{env_name}": {
      "get": {
        "tags": [
          "user-service",
          "init"
        ],
        "summary": "initialize contexts and create an admin user with a group in each context\n depends on two environment variables:\n* ADMIN_PROVIDER_ID (e.g.: \"google\"\n* ADMIN_EXTERNAL_ID (user id with the OpenID Connect provider)",
        "parameters": [
          {
            "in": "path",
            "name": "env_name",
            "description": "the postfix for every context being created (e.g.: \"local\", \"dev\", \"demo\", ...)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "contexts, admin user and admin group have been created or already exist",
            "schema": {
              "type": "string",
              "enum": [
                "OK"
              ]
            }
          }
        }
      }
    }
  },
  "definitions": {
    "HealthResponse200": {
      "description": "response if server is healthy",
      "type": "object",
      "required": [
        "version",
        "status",
        "message"
      ],
      "properties": {
        "version": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "OK",
            "NOK"
          ]
        },
        "message": {
          "type": "string"
        }
      },
      "example": {
        "version": "1.0",
        "status": "OK",
        "message": "Welcome to the ubirchUserService"
      }
    },
    "HealthResponse400": {
      "allOf": [
        {
          "$ref": "#/definitions/HealthResponse200"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "message": "this is some error message"
      }
    },
    "DeepCheckHealthResponse200": {
      "description": "response of deep check if server is healthy",
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            true,
            false
          ]
        },
        "message": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "array with all errors that occurred"
        }
      },
      "example": {
        "status": true,
        "message": []
      }
    },
    "DeepCheckHealthResponse500": {
      "allOf": [
        {
          "$ref": "#/definitions/DeepCheckHealthResponse200"
        }
      ],
      "example": {
        "status": false,
        "message": [
          "unable to connect to the database"
        ]
      }
    },
    "ErrorResponse": {
      "type": "object",
      "description": "object with API version, status and error type and error message",
      "required": [
        "apiVersion",
        "status",
        "errorType",
        "errorMessage"
      ],
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "NOK"
          ]
        },
        "errorType": {
          "type": "string",
          "enum": [
            "CreateError",
            "DeleteError",
            "InitDataFailed",
            "QueryError",
            "ServerError",
            "UpdateError"
          ]
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "ContextCreateRequest": {
      "description": "a context was successfully created",
      "type": "object",
      "required": [
        "displayName"
      ],
      "properties": {
        "displayName": {
          "type": "string"
        }
      },
      "example": {
        "displayName": "ubirch-local"
      }
    },
    "Context": {
      "type": "object",
      "required": [
        "id",
        "displayName"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "context id (UUID)"
        },
        "displayName": {
          "type": "string"
        }
      },
      "example": {
        "id": "9203d4b9-5361-4414-be08-7e56796712aa",
        "displayName": "ubirch-local"
      }
    },
    "ContextCreateError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorResponse"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "errorType": "CreateError",
        "errorMessage": "context already exists"
      }
    },
    "ContextUpdateError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorResponse"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "errorType": "UpdateError",
        "errorMessage": "failed to update context"
      }
    },
    "ContextQueryError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorResponse"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "errorType": "QueryError",
        "errorMessage": "not found"
      }
    },
    "ContextDeleteError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorResponse"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "errorType": "DeleteError",
        "errorMessage": "failed to delete context"
      }
    },
    "RegisterRequest": {
      "description": "a user as we create it",
      "type": "object",
      "required": [
        "context",
        "providerId",
        "userId",
        "displayName",
        "locale"
      ],
      "properties": {
        "context": {
          "type": "string",
          "description": "name of the context a user is registered in"
        },
        "providerId": {
          "type": "string",
          "description": "our id for the OpenID Connect provider"
        },
        "userId": {
          "type": "string",
          "description": "(external) userId as provided by the provider (see providerId). this is different from the internal userId."
        },
        "userName": {
          "type": "string",
          "description": "display name of the user"
        },
        "locale": {
          "type": "string",
          "description": "language code as defined by ISO-639"
        }
      },
      "example": {
        "context": "ubirch-local",
        "providerId": "google",
        "userId": "asdf-1234",
        "userName": "Jane Someone",
        "locale": "en-US"
      }
    },
    "UserCreateRequest": {
      "description": "a user as we create it",
      "type": "object",
      "required": [
        "externalId",
        "providerId",
        "displayName",
        "locale"
      ],
      "properties": {
        "externalId": {
          "type": "string",
          "description": "user id with the OpenID Connect provider"
        },
        "providerId": {
          "type": "string",
          "description": "our id for the OpenID Connect provider"
        },
        "displayName": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        }
      },
      "example": {
        "externalId": "asdf-1234",
        "providerId": "google",
        "displayName": "Jane Someone",
        "locale": "en"
      }
    },
    "User": {
      "allOf": [
        {
          "$ref": "#/definitions/UserCreateRequest"
        }
      ],
      "description": "a user object",
      "type": "object",
      "required": [
        "id",
        "externalId",
        "providerId",
        "displayName",
        "locale"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "user id (UUID)"
        }
      },
      "example": {
        "id": "f74bb67b-ae2d-4101-8490-5f3f52137527",
        "externalId": "asdf-1234",
        "providerId": "google",
        "displayName": "Jane Someone",
        "locale": "en"
      }
    },
    "UserInfoGroup": {
      "description": "info about a group (as part of `UserInfo` responses)",
      "type": "object",
      "required": [
        "id",
        "displayName"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "always an UUID"
        },
        "displayName": {
          "type": "string"
        },
        "adminGroup": {
          "type": "boolean",
          "description": "if true the group is an administrators group; otherwise false (including when it's not defined)"
        }
      },
      "example": {
        "id": "a4c08d88-7c43-4984-a568-0672b4431016",
        "displayName": "Jane Someone",
        "adminGroup": true
      }
    },
    "UserInfo": {
      "description": "info about a user",
      "type": "object",
      "required": [
        "displayName",
        "locale",
        "myGroups",
        "allowedGroups",
        "activeUser"
      ],
      "properties": {
        "displayName": {
          "type": "string"
        },
        "locale": {
          "type": "string",
          "description": "language code as defined by ISO-639"
        },
        "myGroups": {
          "description": "a list of all groups of this user",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInfoGroup"
          }
        },
        "allowedGroups": {
          "description": "a list of all groups this user has been allowed to access",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInfoGroup"
          }
        },
        "activeUser": {
          "type": "boolean",
          "description": "true if user has been activated; false otherwise"
        }
      },
      "example": {
        "displayName": "Jane Someone",
        "locale": "en-US",
        "myGroups": [
          {
            "id": "a4c08d88-7c43-4984-a568-0672b4431016",
            "displayName": "Jane Someone group"
          }
        ],
        "allowedGroups": [],
        "activeUser": true
      }
    },
    "SimpleUserContext": {
      "description": "simple user context allowing us to find a user",
      "type": "object",
      "required": [
        "context",
        "providerId",
        "userId"
      ],
      "properties": {
        "context": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "userId": {
          "type": "string",
          "description": "externalUserId as defined by provider"
        }
      },
      "example": {
        "context": "ubirch-local",
        "providerId": "google",
        "userId": "asdf-1234"
      }
    },
    "UserUpdate": {
      "description": "everything we can update in a user's info",
      "type": "object",
      "required": [
        "displayName"
      ],
      "properties": {
        "displayName": {
          "type": "string"
        }
      },
      "example": {
        "displayName": "new display name"
      }
    },
    "UserInfoUpdate": {
      "description": "a user info update",
      "type": "object",
      "required": [
        "simpleUserContext",
        "update"
      ],
      "properties": {
        "simpleUserContext": {
          "items": {
            "$ref": "#/definitions/SimpleUserContext"
          }
        },
        "update": {
          "items": {
            "$ref": "#/definitions/UserUpdate"
          }
        }
      },
      "example": {
        "simpleUserContext": {
          "context": "ubirch-local",
          "providerId": "google",
          "userId": "asdf-1234"
        },
        "update": {
          "displayName": "my new display name"
        }
      }
    },
    "RegistrationError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorResponse"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "errorType": "RegistrationError",
        "errorMessage": "failed to register new user"
      }
    },
    "UserCreateError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorResponse"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "errorType": "CreateError",
        "errorMessage": "user already exists"
      }
    },
    "UserUpdateError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorResponse"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "errorType": "UpdateError",
        "errorMessage": "failed to update user"
      }
    },
    "UserQueryError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorResponse"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "errorType": "QueryError",
        "errorMessage": "failed to find user"
      }
    },
    "EmailAddressQueryError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorResponse"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "errorType": "QueryError",
        "errorMessage": "no user with given email address exists"
      }
    },
    "UserInfoGetError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorResponse"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "errorType": "NoUserInfoFound",
        "errorMessage": "failed to get user info"
      }
    },
    "UserInfoUpdateError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorResponse"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "errorType": "UpdateError",
        "errorMessage": "failed to update user"
      }
    },
    "UserDeleteError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorResponse"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "errorType": "DeleteError",
        "errorMessage": "failed to delete user"
      }
    },
    "GroupCreateRequest": {
      "description": "a group as we create it",
      "type": "object",
      "required": [
        "displayName",
        "ownerId",
        "contextId"
      ],
      "properties": {
        "displayName": {
          "type": "string"
        },
        "ownerId": {
          "type": "string",
          "description": "id of the user owning the group (UUID)"
        },
        "contextId": {
          "type": "string",
          "description": "id of the context this group exists in (UUID)"
        },
        "allowedUsers": {
          "description": "a list of userIds allowed to access devices assigned to this group",
          "type": "array",
          "items": {
            "type": "string",
            "description": "userId (UUID)"
          }
        },
        "adminGroup": {
          "type": "boolean",
          "description": "only if set and \"true\" all users in this group are admins; usually this field is left out"
        }
      },
      "example": {
        "displayName": "My Personal Group",
        "ownerId": "d86df828-d4a1-455a-ad38-0d7fb5cec4db",
        "contextId": "9203d4b9-5361-4414-be08-7e56796712aa",
        "allowedUsers": [
          "3beebf40-a82c-4b29-b5ab-3cdc246dc820"
        ],
        "adminGroup": true
      }
    },
    "Group": {
      "allOf": [
        {
          "$ref": "#/definitions/GroupCreateRequest"
        }
      ],
      "description": "a group object",
      "type": "object",
      "required": [
        "id",
        "displayName",
        "ownerId",
        "contextId"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "group id (UUID)"
        }
      },
      "example": {
        "id": "f74bb67b-ae2d-4101-8490-5f3f52137527",
        "displayName": "My Personal Group",
        "ownerId": "d86df828-d4a1-455a-ad38-0d7fb5cec4db",
        "contextId": "9203d4b9-5361-4414-be08-7e56796712aa",
        "allowedUsers": [
          "3beebf40-a82c-4b29-b5ab-3cdc246dc820"
        ],
        "adminGroup": true
      }
    },
    "GroupCreateError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorResponse"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "errorType": "CreateError",
        "errorMessage": "failed to create group"
      }
    },
    "GroupUpdateError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorResponse"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "errorType": "UpdateError",
        "errorMessage": "failed to update group"
      }
    },
    "GroupQueryError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorResponse"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "errorType": "QueryError",
        "errorMessage": "failed to find group"
      }
    },
    "GroupDeleteError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorResponse"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "errorType": "DeleteError",
        "errorMessage": "failed to delete group"
      }
    },
    "AllowedUsers": {
      "description": "add/remove users to/from a group's _allowedUsers_ list",
      "type": "object",
      "required": [
        "groupId",
        "allowedUsers"
      ],
      "properties": {
        "groupId": {
          "type": "string",
          "description": "UUID of the group to update"
        },
        "allowedUsers": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "userId (UUID)"
          }
        }
      },
      "example": {
        "groupId": "d9f9668c-1e93-4664-b567-ac575ffe84a3",
        "allowedUsers": [
          "6b4b0457-9830-485b-971d-e23b1d22048c"
        ]
      }
    },
    "GroupAddAllowedError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorResponse"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "errorType": "UpdateError",
        "errorMessage": "failed to add allowed users"
      }
    },
    "GroupDeleteAllowedError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorResponse"
        }
      ],
      "example": {
        "version": "1.0",
        "status": "NOK",
        "errorType": "UpdateError",
        "errorMessage": "failed to delete allowed users"
      }
    }
  }
}